AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  BaseRegion:
    Fn::Equals:
      - eu-west-1
      - Ref: AWS::Region
  BucketAppRepository:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryAccountsReaddev:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryAccountsReadprd:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryAccountsReadstg:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryAccountsWritedev:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryAccountsWriteprd:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryAccountsWritestg:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryCors:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryOutputValueRegion:
    Fn::Not:
      - Fn::Equals:
          - AWSRegion
          - AWSRegion
  BucketAppRepositoryPolicyRead:
    Fn::Or:
      - Fn::Equals:
          - '1'
          - '0'
      - Fn::Equals:
          - '1'
          - '0'
      - Condition: BucketAppRepositoryAccountsReaddev
      - Condition: BucketAppRepositoryAccountsReadstg
      - Condition: BucketAppRepositoryAccountsReadprd
  BucketAppRepositoryPolicyStatementReplicaPrincipal:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketAppRepositoryPolicyWrite:
    Fn::Or:
      - Fn::Equals:
          - '1'
          - '0'
      - Fn::Equals:
          - '1'
          - '0'
      - Condition: BucketAppRepositoryAccountsWritedev
      - Condition: BucketAppRepositoryAccountsWritestg
      - Condition: BucketAppRepositoryAccountsWriteprd
  BucketAppRepositoryReplica:
    Fn::And:
      - Condition: BucketAppRepository
      - Fn::Not:
          - Fn::Equals:
              - None
              - None
  BucketAppRepositoryVersioning:
    Fn::Not:
      - Fn::Equals:
          - Enabled
          - None
  BucketLogs:
    Fn::Not:
      - Fn::Equals:
          - true
          - None
  BucketLogsAccountsReaddev:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsAccountsReadprd:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsAccountsReadstg:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsAccountsWritedev:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsAccountsWriteprd:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsAccountsWritestg:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsCors:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsPolicyRead:
    Fn::Or:
      - Fn::Equals:
          - '1'
          - '0'
      - Fn::Equals:
          - '1'
          - '0'
      - Condition: BucketLogsAccountsReaddev
      - Condition: BucketLogsAccountsReadstg
      - Condition: BucketLogsAccountsReadprd
  BucketLogsPolicyStatementReplicaPrincipal:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  BucketLogsPolicyWrite:
    Fn::Or:
      - Fn::Equals:
          - '1'
          - '0'
      - Fn::Equals:
          - '1'
          - '0'
      - Condition: BucketLogsAccountsWritedev
      - Condition: BucketLogsAccountsWritestg
      - Condition: BucketLogsAccountsWriteprd
  BucketLogsReplica:
    Fn::And:
      - Condition: BucketLogs
      - Fn::Not:
          - Fn::Equals:
              - None
              - None
  BucketLogsVersioning:
    Fn::Not:
      - Fn::Equals:
          - None
          - None
  EC2VPCEndpointS3:
    Fn::Not:
      - Fn::Equals:
          - true
          - None
  HostedZoneEnv:
    Fn::Or:
      - Fn::And:
          - Condition: HostedZonePublicEnvEnabledOverride
          - Fn::Not:
              - Fn::Equals:
                  - Ref: HostedZonePublicEnvEnabled
                  - None
      - Fn::And:
          - Fn::Not:
              - Condition: HostedZonePublicEnvEnabledOverride
          - Fn::Not:
              - Fn::Equals:
                  - None
                  - None
  HostedZonePublicEnvEnabledOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: HostedZonePublicEnvEnabled
          - ''
  HostedZonePublicEnvIdOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: HostedZonePublicEnvId
          - ''
Description: res-base (Generated by awsibox 0.2.20) [res]
Mappings:
  dev:
    eu-central-1:
      LoadBalancerAccountID: '054676820928'
    eu-west-1:
      LoadBalancerAccountID: 156460612806
    us-east-1:
      LoadBalancerAccountID: 127311923021
  prd:
    eu-central-1:
      LoadBalancerAccountID: '054676820928'
    eu-west-1:
      LoadBalancerAccountID: 156460612806
    us-east-1:
      LoadBalancerAccountID: 127311923021
  stg:
    eu-central-1:
      LoadBalancerAccountID: '054676820928'
    eu-west-1:
      LoadBalancerAccountID: 156460612806
    us-east-1:
      LoadBalancerAccountID: 127311923021
Outputs:
  BrandDomain:
    Value: numenor.arda
  BucketAppRepository:
    Export:
      Name: BucketAppRepository
    Value:
      Fn::If:
        - BucketAppRepository
        - Ref: BucketAppRepository
        - Fn::If:
            - BucketAppRepositoryOutputValueRegion
            - Fn::Sub:
                - ${Region}-arda-numenor-app-repository
                - Region: AWSRegion
            - Fn::Sub: ${AWS::Region}-arda-numenor-app-repository
  BucketLogs:
    Value:
      Fn::If:
        - BucketLogs
        - Ref: BucketLogs
        - Fn::Sub: ${AWS::Region}-arda-numenor-${EnvShort}-logs
  Env:
    Value:
      Ref: Env
  EnvRole:
    Value:
      Ref: EnvRole
  EnvStackVersion:
    Value:
      Ref: EnvStackVersion
  HostedZoneIdEnv:
    Export:
      Name: HostedZoneIdEnv
    Value:
      Fn::If:
        - HostedZoneEnv
        - Ref: HostedZoneEnv
        - Fn::If:
            - HostedZonePublicEnvIdOverride
            - Ref: HostedZonePublicEnvId
            - None
  HostedZoneIdPrivate:
    Export:
      Name: HostedZoneIdPrivate
    Value:
      Ref: HostedZonePrivate
  HostedZoneNameEnv:
    Value:
      Fn::Sub: ${EnvShort}.numenor.arda
  HostedZoneNamePrivate:
    Value:
      Fn::Sub: internal.numenor.arda
  IAMPolicyBaseInstance:
    Export:
      Name: IAMPolicyBaseInstance
    Value:
      Ref: IAMPolicyBaseInstance
  IAMPolicyCloudWatchPutMetric:
    Export:
      Name: IAMPolicyCloudWatchPutMetric
    Value:
      Ref: IAMPolicyCloudWatchPutMetric
  IAMPolicyEcs:
    Export:
      Name: IAMPolicyEcs
    Value:
      Ref: IAMPolicyEcs
  IAMPolicySSM:
    Export:
      Name: IAMPolicySSM
    Value:
      Ref: IAMPolicySSM
  KeyParameterStore:
    Export:
      Name: KeyParameterStore
    Value:
      Fn::Sub: ${KMSKeyParameterStore.Arn}
  LambdaECSRunTaskArn:
    Export:
      Name: LambdaECSRunTaskArn
    Value:
      Fn::GetAtt:
        - LambdaECSRunTask
        - Arn
  RoleASGLifecycleHookECSDrainInstance:
    Export:
      Name: RoleASGLifecycleHookECSDrainInstance
    Value:
      Fn::GetAtt:
        - RoleASGLifecycleHookECSDrainInstance
        - Arn
  RoleApiGatewayCloudWatch:
    Export:
      Name: RoleApiGatewayCloudWatch
    Value:
      Fn::GetAtt:
        - RoleApiGatewayCloudWatch
        - Arn
  RoleCodeDeploy:
    Export:
      Name: RoleCodeDeploy
    Value:
      Fn::GetAtt:
        - RoleCodeDeploy
        - Arn
  RoleEC2ContainerServiceAutoscale:
    Export:
      Name: RoleEC2ContainerServiceAutoscale
    Value:
      Fn::GetAtt:
        - RoleEC2ContainerServiceAutoscale
        - Arn
  RoleECSEvents:
    Export:
      Name: RoleECSEvents
    Value:
      Fn::GetAtt:
        - RoleECSEvents
        - Arn
  RoleECSService:
    Export:
      Name: RoleECSService
    Value:
      Fn::GetAtt:
        - RoleECSService
        - Arn
  RoleECSTaskExecution:
    Export:
      Name: RoleECSTaskExecution
    Value:
      Fn::GetAtt:
        - RoleECSTaskExecution
        - Arn
  RoleLambdaECSRunTask:
    Export:
      Name: RoleLambdaECSRunTask
    Value:
      Ref: RoleLambdaECSRunTask
  SNSTopicCloudWatchAlarm:
    Export:
      Name: SNSTopicCloudWatchAlarm
    Value:
      Ref: SNSTopicCloudWatchAlarm
  SNSTopicECSDrainInstance:
    Export:
      Name: SNSTopicECSDrainInstance
    Value:
      Ref: SNSTopicECSDrainInstance
  SecurityGroupBaseInstance:
    Export:
      Name: SecurityGroupBaseInstance
    Value:
      Fn::GetAtt:
        - SecurityGroupBaseInstance
        - GroupId
  SecurityGroupLoadBalancerApplicationExternal:
    Export:
      Name: SecurityGroupLoadBalancerApplicationExternal
    Value:
      Fn::GetAtt:
        - SecurityGroupLoadBalancerApplicationExternal
        - GroupId
  SecurityGroupLoadBalancerApplicationInternal:
    Export:
      Name: SecurityGroupLoadBalancerApplicationInternal
    Value:
      Fn::GetAtt:
        - SecurityGroupLoadBalancerApplicationInternal
        - GroupId
  ServiceDiscoveryPublicDnsNamespaceId:
    Export:
      Name: ServiceDiscoveryPublicDnsNamespaceId
    Value:
      Ref: PublicDnsNamespace
  StackType:
    Value: res
Parameters:
  Env:
    AllowedValues:
      - dev
      - stg
      - prod
    Default: dev
    Description: Environment
    Type: String
  EnvRole:
    AllowedPattern: ^[a-zA-Z0-9-_.]*$
    Default: ''
    Description: Service Role
    Type: String
  EnvShort:
    AllowedValues:
      - dev
      - stg
      - prd
    Default: dev
    Description: Environment Short - NEVER CHANGE!
    Type: String
  EnvStackVersion:
    Default: '1'
    Description: Stack version, if changed with UpdateMode=Cfn triggers cfn-hup
    Type: String
  HostedZonePublicEnvEnabled:
    Default: ''
    Description: Create Public HostedZoneEnv - can be created in only one Region -
      empty for default based on env/role
    Type: String
  HostedZonePublicEnvId:
    Default: ''
    Description: Id of Public HostedZoneEnv - required in all Regions where HostedZonePublicEnv
      is not created - empty for default based on env/role
    Type: String
Resources:
  BucketAppRepository:
    Condition: BucketAppRepository
    Properties:
      BucketName:
        Fn::Sub: ${AWS::Region}-arda-numenor-app-repository
      CorsConfiguration:
        Fn::If:
          - BucketAppRepositoryCors
          - CorsRules:
              - AllowedHeaders:
                  - Authorization
                AllowedMethods:
                  - GET
                AllowedOrigins:
                  - '*'
                MaxAge: 3000
          - Ref: AWS::NoValue
      VersioningConfiguration:
        Fn::If:
          - BucketAppRepositoryVersioning
          - Status: Enabled
          - Ref: AWS::NoValue
    Type: AWS::S3::Bucket
  BucketLogs:
    Condition: BucketLogs
    Properties:
      BucketName:
        Fn::Sub: ${AWS::Region}-arda-numenor-${EnvShort}-logs
      CorsConfiguration:
        Fn::If:
          - BucketLogsCors
          - CorsRules:
              - AllowedHeaders:
                  - Authorization
                AllowedMethods:
                  - GET
                AllowedOrigins:
                  - '*'
                MaxAge: 3000
          - Ref: AWS::NoValue
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Id: delete
            Status: Enabled
      VersioningConfiguration:
        Fn::If:
          - BucketLogsVersioning
          - Status: None
          - Ref: AWS::NoValue
    Type: AWS::S3::Bucket
  BucketPolicyAppRepository:
    Condition: BucketAppRepository
    Properties:
      Bucket:
        Fn::Sub: ${AWS::Region}-arda-numenor-app-repository
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketLocation
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource:
              Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository
            Sid: Base
          - Fn::If:
              - BucketAppRepositoryPolicyStatementReplicaPrincipal
              - Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ObjectOwnerOverrideToBucketOwner
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::Sub:
                        - arn:aws:iam::${BucketAppRepositoryPolicyStatementReplicaPrincipal}:root
                        - BucketAppRepositoryPolicyStatementReplicaPrincipal: None
                Resource: []
                Sid: AllowReplica
              - Ref: AWS::NoValue
          - Fn::If:
              - BucketAppRepositoryPolicyRead
              - Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketVersions
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::If:
                        - BucketAppRepositoryAccountsReaddev
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsReaddev}:root
                            - BucketAppRepositoryAccountsReaddev: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketAppRepositoryAccountsReadstg
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsReadstg}:root
                            - BucketAppRepositoryAccountsReadstg: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketAppRepositoryAccountsReadprd
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsReadprd}:root
                            - BucketAppRepositoryAccountsReadprd: None
                        - Ref: AWS::NoValue
                Resource:
                  - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository
                Sid: AllowListBucket
              - Ref: AWS::NoValue
          - Fn::If:
              - BucketAppRepositoryPolicyRead
              - Action:
                  - s3:GetObject
                  - s3:ListMultipartUploadParts
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::If:
                        - BucketAppRepositoryAccountsReaddev
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsReaddev}:root
                            - BucketAppRepositoryAccountsReaddev: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketAppRepositoryAccountsReadstg
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsReadstg}:root
                            - BucketAppRepositoryAccountsReadstg: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketAppRepositoryAccountsReadprd
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsReadprd}:root
                            - BucketAppRepositoryAccountsReadprd: None
                        - Ref: AWS::NoValue
                Resource:
                  - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository/*
                Sid: AllowGetObject
              - Ref: AWS::NoValue
          - Fn::If:
              - BucketAppRepositoryPolicyWrite
              - Action:
                  - s3:Put*
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::If:
                        - BucketAppRepositoryAccountsWritedev
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsWritedev}:root
                            - BucketAppRepositoryAccountsWritedev: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketAppRepositoryAccountsWritestg
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsWritestg}:root
                            - BucketAppRepositoryAccountsWritestg: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketAppRepositoryAccountsWriteprd
                        - Fn::Sub:
                            - arn:aws:iam::${BucketAppRepositoryAccountsWriteprd}:root
                            - BucketAppRepositoryAccountsWriteprd: None
                        - Ref: AWS::NoValue
                Resource:
                  - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository/*
                Sid: AllowPut
              - Ref: AWS::NoValue
        Version: '2012-10-17'
    Type: AWS::S3::BucketPolicy
  BucketPolicyLogs:
    Condition: BucketLogs
    Properties:
      Bucket:
        Fn::Sub: ${AWS::Region}-arda-numenor-${EnvShort}-logs
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketLocation
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource:
              Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-${EnvShort}-logs
            Sid: Base
          - Fn::If:
              - BucketLogsPolicyStatementReplicaPrincipal
              - Action:
                  - s3:ReplicateObject
                  - s3:ReplicateDelete
                  - s3:ObjectOwnerOverrideToBucketOwner
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::Sub:
                        - arn:aws:iam::${BucketLogsPolicyStatementReplicaPrincipal}:root
                        - BucketLogsPolicyStatementReplicaPrincipal: None
                Resource: []
                Sid: AllowReplica
              - Ref: AWS::NoValue
          - Fn::If:
              - BucketLogsPolicyRead
              - Action:
                  - s3:ListBucket
                  - s3:GetBucketLocation
                  - s3:ListBucketMultipartUploads
                  - s3:ListBucketVersions
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::If:
                        - BucketLogsAccountsReaddev
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsReaddev}:root
                            - BucketLogsAccountsReaddev: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketLogsAccountsReadstg
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsReadstg}:root
                            - BucketLogsAccountsReadstg: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketLogsAccountsReadprd
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsReadprd}:root
                            - BucketLogsAccountsReadprd: None
                        - Ref: AWS::NoValue
                Resource:
                  - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-${EnvShort}-logs
                Sid: AllowListBucket
              - Ref: AWS::NoValue
          - Fn::If:
              - BucketLogsPolicyRead
              - Action:
                  - s3:GetObject
                  - s3:ListMultipartUploadParts
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::If:
                        - BucketLogsAccountsReaddev
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsReaddev}:root
                            - BucketLogsAccountsReaddev: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketLogsAccountsReadstg
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsReadstg}:root
                            - BucketLogsAccountsReadstg: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketLogsAccountsReadprd
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsReadprd}:root
                            - BucketLogsAccountsReadprd: None
                        - Ref: AWS::NoValue
                Resource:
                  - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-${EnvShort}-logs/*
                Sid: AllowGetObject
              - Ref: AWS::NoValue
          - Fn::If:
              - BucketLogsPolicyWrite
              - Action:
                  - s3:Put*
                Effect: Allow
                Principal:
                  AWS:
                    - Fn::If:
                        - BucketLogsAccountsWritedev
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsWritedev}:root
                            - BucketLogsAccountsWritedev: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketLogsAccountsWritestg
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsWritestg}:root
                            - BucketLogsAccountsWritestg: None
                        - Ref: AWS::NoValue
                    - Fn::If:
                        - BucketLogsAccountsWriteprd
                        - Fn::Sub:
                            - arn:aws:iam::${BucketLogsAccountsWriteprd}:root
                            - BucketLogsAccountsWriteprd: None
                        - Ref: AWS::NoValue
                Resource:
                  - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-${EnvShort}-logs/*
                Sid: AllowPut
              - Ref: AWS::NoValue
          - Action: s3:PutObject
            Effect: Allow
            Principal:
              AWS:
                Fn::FindInMap:
                  - Ref: EnvShort
                  - Ref: AWS::Region
                  - LoadBalancerAccountID
            Resource:
              Fn::Sub: arn:aws:s3:::${BucketLogs}/*
            Sid: AllowLBLogs
        Version: '2012-10-17'
    Type: AWS::S3::BucketPolicy
  EC2VPCEndpointS3:
    Condition: EC2VPCEndpointS3
    Properties:
      RouteTableIds:
        - Fn::ImportValue: RouteTablePrivate
      ServiceName:
        Fn::Sub: com.amazonaws.${AWS::Region}.s3
      VpcId:
        Fn::ImportValue: VpcId
    Type: AWS::EC2::VPCEndpoint
  HostedZoneEnv:
    Condition: HostedZoneEnv
    Properties:
      HostedZoneConfig:
        Comment:
          Fn::Sub: ${EnvShort} public zone
      Name:
        Fn::Sub: ${EnvShort}.numenor.arda
    Type: AWS::Route53::HostedZone
  HostedZonePrivate:
    Properties:
      HostedZoneConfig:
        Comment:
          Fn::Sub: ${EnvShort} private zone ${AWS::Region}
      Name:
        Fn::Sub: internal.numenor.arda
      VPCs:
        - VPCId:
            Fn::ImportValue: VpcId
          VPCRegion:
            Ref: AWS::Region
    Type: AWS::Route53::HostedZone
  IAMPolicyBaseInstance:
    Properties:
      Description: Policy common to all instances
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Effect: Allow
            Resource: arn:aws:s3:::*
          - Action:
              - s3:Get*
              - s3:List*
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository/*
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-data
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-data/*
              - Fn::Sub: arn:aws:s3:::aws-codedeploy-${AWS::Region}
              - Fn::Sub: arn:aws:s3:::aws-codedeploy-${AWS::Region}/*
          - Action:
              - elasticloadbalancing:DescribeInstanceHealth
              - elasticloadbalancing:DescribeTargetHealth
              - ec2:DescribeInstances
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  IAMPolicyCloudWatchPutMetric:
    Properties:
      Description: Policy for ecs-task to put CW metric data
      PolicyDocument:
        Statement:
          - Action:
              - cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  IAMPolicyEcs:
    Properties:
      Description: EcsCluster
      PolicyDocument:
        Statement:
          - Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecs:UpdateContainerInstancesState
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
              - ecr:GetAuthorizationToken
            Effect: Allow
            Resource: '*'
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  IAMPolicyReplicaBucketAppRepository:
    Condition: BucketAppRepositoryReplica
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository
          - Action:
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-app-repository/*
          - Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
              - s3:ObjectOwnerOverrideToBucketOwner
            Effect: Allow
            Resource: []
        Version: '2012-10-17'
      PolicyName: IAMPolicyReplicaBucketAppRepository
      Roles:
        - Ref: RoleBucketAppRepositoryReplica
    Type: AWS::IAM::Policy
  IAMPolicyReplicaBucketLogs:
    Condition: BucketLogsReplica
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetReplicationConfiguration
              - s3:ListBucket
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-${EnvShort}-logs
          - Action:
              - s3:GetObjectVersion
              - s3:GetObjectVersionAcl
              - s3:GetObjectVersionTagging
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-arda-numenor-${EnvShort}-logs/*
          - Action:
              - s3:ReplicateObject
              - s3:ReplicateDelete
              - s3:ReplicateTags
              - s3:ObjectOwnerOverrideToBucketOwner
            Effect: Allow
            Resource: []
        Version: '2012-10-17'
      PolicyName: IAMPolicyReplicaBucketLogs
      Roles:
        - Ref: RoleBucketLogsReplica
    Type: AWS::IAM::Policy
  IAMPolicySSM:
    Properties:
      Description: Policy to let Instances Manage SSM
      PolicyDocument:
        Statement:
          - Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:GetManifest
              - ssm:GetParameters
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
            Effect: Allow
            Resource: '*'
          - Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Effect: Allow
            Resource: '*'
          - Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Effect: Allow
            Resource: '*'
          - Action: cloudwatch:PutMetricData
            Effect: Allow
            Resource: '*'
          - Action: ec2:DescribeInstanceStatus
            Effect: Allow
            Resource: '*'
          - Action:
              - ds:CreateComputer
              - ds:DescribeDirectories
            Effect: Allow
            Resource: '*'
          - Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Effect: Allow
            Resource: '*'
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:s3:::aws-ssm-${AWS::Region}/*
              - Fn::Sub: arn:aws:s3:::amazon-ssm-${AWS::Region}/*
              - Fn::Sub: arn:aws:s3:::amazon-ssm-packages-${AWS::Region}/*
              - Fn::Sub: arn:aws:s3:::${AWS::Region}-birdwatcher-prod/*
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  KMSAliasParameterStore:
    Properties:
      AliasName:
        Fn::Sub: alias/parameter_store_key
      TargetKeyId:
        Ref: KMSKeyParameterStore
    Type: AWS::KMS::Alias
  KMSKeyParameterStore:
    Properties:
      KeyPolicy:
        Id: key-default-1
        Statement:
          - Action: kms:*
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: arn:aws:iam::${AWS::AccountId}:root
            Resource: '*'
            Sid: Enable IAM User Permissions
        Version: '2012-10-17'
    Type: AWS::KMS::Key
  LambdaECSDrainInstance:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - "# vim: ft=python expandtab shiftwidth=2 softtabstop=2\n"
              - "import json\n"
              - "import time\n"
              - "import boto3\n"
              - "import os\n"
              - "from datetime import datetime, timedelta\n"
              - "\n"
              - "ECS = boto3.client('ecs')\n"
              - "ASG = boto3.client('autoscaling')\n"
              - "SNS = boto3.client('sns')\n"
              - "CLF = boto3.client('cloudformation')\n"
              - "\n"
              - "def find_ecs_instance_info(instance_id, Cluster):\n"
              - "  paginator = ECS.get_paginator('list_container_instances')\n"
              - "  for list_resp in paginator.paginate(cluster=Cluster):\n"
              - "    arns = list_resp['containerInstanceArns']\n"
              - "    desc_resp = ECS.describe_container_instances(\n"
              - "      cluster=Cluster,\n"
              - "      containerInstances=arns)\n"
              - "    for cI in desc_resp['containerInstances']:\n"
              - "      if cI['ec2InstanceId'] != instance_id:\n"
              - "        continue\n"
              - "      print('Found instance: id=%s, arn=%s, status=%s, runningTasksCount=%s'\
                \ %\n"
              - "        (instance_id, cI['containerInstanceArn'], cI['status'], cI['runningTasksCount']))\n"
              - "      return cI['containerInstanceArn'], cI['status'], cI['runningTasksCount']\n"
              - "  return None, None, 0\n"
              - "\n"
              - "def instance_has_running_tasks(instance_id, Cluster):\n"
              - "  (instance_arn, container_status, running_tasks) = find_ecs_instance_info(instance_id,\
                \ Cluster)\n"
              - "  if instance_arn is None:\n"
              - "    print('Could not find instance ID %s.' % (instance_id))\n"
              - "    return False\n"
              - "  if container_status != 'DRAINING':\n"
              - "    print('Setting container instance %s (%s) to DRAINING' % (instance_id,\
                \ instance_arn))\n"
              - "    ECS.update_container_instances_state(cluster=Cluster,\n"
              - "      containerInstances=[instance_arn],\n"
              - "      status='DRAINING')\n"
              - "  return running_tasks > 0\n"
              - "\n"
              - "def getClfExports():\n"
              - "  exports = {}\n"
              - "  paginator = CLF.get_paginator('list_exports')\n"
              - "  responseIterator = paginator.paginate()\n"
              - "  for e in responseIterator:\n"
              - "    for export in e['Exports']:\n"
              - "      name = export['Name']\n"
              - "      value = export['Value']\n"
              - "      exports[name] = value\n"
              - "  return exports\n"
              - "\n"
              - "\n"
              - "def findEcsCluster(asgName):\n"
              - "  asgTags = ASG.describe_auto_scaling_groups(AutoScalingGroupNames=[asgName])['AutoScalingGroups'][0]['Tags']\n"
              - "  stackName = None\n"
              - "  for n in asgTags:\n"
              - "    if n['Key'] == 'aws:cloudformation:stack-name':\n"
              - "      stackName = n['Value']\n"
              - "  if stackName:\n"
              - "    try:\n"
              - "      return getClfExports()['Cluster-' + stackName]\n"
              - "    except:\n"
              - "      pass\n"
              - "\n"
              - "def getHeartbeatTimeout(asgName, lchName):\n"
              - "  heartbeatTimeout = 900\n"
              - "  try:\n"
              - "    heartbeatTimeout = ASG.describe_lifecycle_hooks(AutoScalingGroupName=asgName,\n"
              - "      LifecycleHookNames=[lchName])['LifecycleHooks'][0]['HeartbeatTimeout']\n"
              - "  except:\n"
              - "    pass\n"
              - "\n"
              - "  return heartbeatTimeout\n"
              - "\n"
              - "def lambda_handler(event, context):\n"
              - "  time_format = '%Y-%m-%dT%H:%M:%S.%fZ'\n"
              - "  topicArn = event['Records'][0]['Sns']['TopicArn']\n"
              - "  msg = json.loads(event['Records'][0]['Sns']['Message'])\n"
              - "\n"
              - "  if 'LifecycleTransition' not in msg.keys() or \\\n"
              - "    msg['LifecycleTransition'].find('autoscaling:EC2_INSTANCE_TERMINATING')\
                \ == -1:\n"
              - "    return\n"
              - "\n"
              - "  autoScalingGroupName = msg['AutoScalingGroupName']\n"
              - "  lifecycleHookName = msg['LifecycleHookName']\n"
              - "  instanceId = msg['EC2InstanceId']\n"
              - "\n"
              - "  ecsCluster = findEcsCluster(autoScalingGroupName)\n"
              - "  print('Cluster: %s' % (ecsCluster))\n"
              - "  heartbeatTimeout = getHeartbeatTimeout(autoScalingGroupName, lifecycleHookName)\n"
              - "  print('HB: %s' % (heartbeatTimeout))\n"
              - "\n"
              - "  if not ecsCluster or instance_has_running_tasks(instanceId, ecsCluster):\n"
              - "    if 'EndTime' in msg:\n"
              - "      if datetime.utcnow() > datetime.strptime(msg['EndTime'], time_format):\n"
              - "        print('End HeartbeatTimeout')\n"
              - "        return\n"
              - "    else:\n"
              - "        endtime = datetime.strptime(msg['Time'], time_format) + timedelta(seconds=heartbeatTimeout)\n"
              - "        msg['EndTime'] = endtime.strftime(time_format)\n"
              - "    print('Tasks running on %s; posting to SNS topic %s' % (instanceId,\
                \ topicArn))\n"
              - "    time.sleep(20)\n"
              - "    sns_resp = SNS.publish(TopicArn=topicArn,\n"
              - "      Message=json.dumps(msg),\n"
              - "      Subject='Publishing SNS msg to invoke Lambda again.')\n"
              - "    print('Posted msg %s to SNS topic.' % (sns_resp['MessageId']))\n"
              - "  else:\n"
              - "    print('No tasks running on %s; completing lifecycle' % (instanceId))\n"
              - "    ASG.complete_lifecycle_action(LifecycleHookName=lifecycleHookName,\n"
              - "      AutoScalingGroupName=autoScalingGroupName,\n"
              - "      LifecycleActionResult='CONTINUE',\n"
              - "      InstanceId=instanceId)\n"
      Description: Gracefully drain ECS tasks from EC2 instances before the instances
        are terminated by autoscaling.
      Environment:
        Variables:
          Env:
            Ref: EnvShort
          EnvRole:
            Ref: EnvRole
      FunctionName:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-ECSDrainInstance
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoleLambdaECSDrainInstance
          - Arn
      Runtime: python3.6
      Timeout: 60
    Type: AWS::Lambda::Function
  LambdaECSRunTask:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - "import boto3\n"
              - "import logging\n"
              - "import os\n"
              - "logger = logging.getLogger()\n"
              - "logger.setLevel(logging.INFO)\n"
              - "\n"
              - "def get_autoscale_info():\n"
              - "  ec2 = boto3.resource('ec2')\n"
              - "  instance_iterator = ec2.instances.filter(\n"
              - "    Filters=[\n"
              - "      {\n"
              - "        'Name': 'tag:EnvStackName',\n"
              - "        'Values': [cw_event['ECSInstancesStackName']]\n"
              - "      },\n"
              - "      {\n"
              - "        'Name': 'instance-state-name',\n"
              - "        'Values': ['running']\n"
              - "      }\n"
              - "    ]\n"
              - "  )\n"
              - "  sorted_instances = sorted(\n"
              - "    instance_iterator,\n"
              - "    key=lambda i: (i.launch_time, i.id),\n"
              - "    reverse=True\n"
              - "  )\n"
              - "  return sorted_instances\n"
              - "\n"
              - "def get_container_instance(ecs, id):\n"
              - "  response = ecs.list_container_instances(\n"
              - "    cluster=cw_event['Cluster'],\n"
              - "    status='ACTIVE'\n"
              - "  )\n"
              - "  for c in response['containerInstanceArns']:\n"
              - "    resp = ecs.describe_container_instances(\n"
              - "      cluster=cw_event['Cluster'],\n"
              - "      containerInstances=[c]\n"
              - "    )\n"
              - "    if resp['containerInstances'][0]['ec2InstanceId'] == id:\n"
              - "      return c\n"
              - "\n"
              - "def manage_attribute(ecs, action, id=None):\n"
              - "  kwargs = {\n"
              - "    'cluster': cw_event['Cluster'],\n"
              - "    'attributes': [{\n"
              - "      'name': 'LambdaRunTask'\n"
              - "    }]\n"
              - "  }\n"
              - "  if action == 'put':\n"
              - "    kwargs['attributes']['targetType'] = 'container-instance'\n"
              - "    kwargs['attributes']['targetId'] = id\n"
              - "    ecs.put_attributes(**kwargs)\n"
              - "  else:\n"
              - "    ecs.delete_attributes(**kwargs)\n"
              - "\n"
              - "def lambda_handler(event, context):\n"
              - "  global cw_event\n"
              - "  cw_event = event\n"
              - "  logger.info(cw_event)\n"
              - "  ecs = boto3.client('ecs')\n"
              - "  kwargs = {\n"
              - "    'taskDefinition': cw_event['TaskDefinition'],\n"
              - "    'cluster': cw_event['Cluster'],\n"
              - "    #'placementConstraints': [{\n"
              - "    #  'type': 'memberOf',\n"
              - "    #  'expression': 'attribute:LambdaRunTask exists',\n"
              - "    #}],\n"
              - "  }\n"
              - "  if 'NetworkModeAwsVpc' in cw_event:\n"
              - "    kwargs['networkConfiguration'] = {\n"
              - "      'awsvpcConfiguration': {\n"
              - "        'subnets': cw_event['Subnets'].split(','),\n"
              - "        'securityGroups': cw_event['SecurityGroups'].split(),\n"
              - "        'assignPublicIp': 'DISABLED',\n"
              - "      }\n"
              - "    }\n"
              - "  if cw_event['LaunchType'] == 'EC2':\n"
              - "    #manage_attribute(ecs, 'delete')\n"
              - "    sorted_instances = get_autoscale_info()\n"
              - "    my_instance = sorted_instances[0].id\n"
              - "    my_container_instance = get_container_instance(ecs, my_instance)\n"
              - "    logger.info(my_instance)\n"
              - "    logger.info(my_container_instance)\n"
              - "    #manage_attribute(ecs, 'put', my_container_instance)\n"
              - "    kwargs['containerInstances'] = [my_container_instance]\n"
              - "    response = ecs.start_task(**kwargs)\n"
              - "  else:\n"
              - "    kwargs['count'] = 1\n"
              - "    kwargs['launchType'] = 'FARGATE'\n"
              - "    response = ecs.run_task(**kwargs)\n"
              - "  if 'failures' in response and len(response['failures']) > 0:\n"
              - "    logger.info(response)\n"
              - "    return(1)\n"
              - "  else:\n"
              - "    return(0)\n"
      Description: Run ECS Task
      Environment:
        Variables:
          Env:
            Ref: EnvShort
          EnvRole:
            Ref: EnvRole
      FunctionName:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-ECSRunTask
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoleLambdaECSRunTask
          - Arn
      Runtime: python2.7
      Timeout: 60
    Type: AWS::Lambda::Function
  LambdaPermissionECSDrainInstanceSNSECSDrainInstance:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaECSDrainInstance
          - Arn
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SNSTopicECSDrainInstance
    Type: AWS::Lambda::Permission
  PublicDnsNamespace:
    Properties:
      Description: Service Discovery
      Name:
        Fn::Sub: find.${EnvShort}.numenor.arda
    Type: AWS::ServiceDiscovery::PublicDnsNamespace
  RoleASGLifecycleHookECSDrainInstance:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - autoscaling.amazonaws.com
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: sns:Publish
                Effect: Allow
                Resource:
                  Ref: SNSTopicECSDrainInstance
            Version: '2012-10-17'
          PolicyName: ASGLifecycleHookECSDrainInstance
    Type: AWS::IAM::Role
  RoleApiGatewayCloudWatch:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /
    Type: AWS::IAM::Role
  RoleBucketAppRepositoryReplica:
    Condition: BucketAppRepositoryReplica
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  RoleBucketLogsReplica:
    Condition: BucketLogsReplica
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - s3.amazonaws.com
        Version: '2012-10-17'
      Path: /
    Type: AWS::IAM::Role
  RoleCodeDeploy:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole
      Path: /
    Type: AWS::IAM::Role
  RoleEC2ContainerServiceAutoscale:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
      Path: /
    Type: AWS::IAM::Role
  RoleECSEvents:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceEventsRole
      Path: /
    Type: AWS::IAM::Role
  RoleECSService:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
      Path: /
    Type: AWS::IAM::Role
  RoleECSTaskExecution:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Path: /
    Type: AWS::IAM::Role
  RoleLambdaECSDrainInstance:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action: autoscaling:CompleteLifecycleAction
                Effect: Allow
                Resource: '*'
              - Action: ecs:ListContainerInstances
                Effect: Allow
                Resource: '*'
              - Action:
                  - ecs:DescribeContainerInstances
                  - ecs:UpdateContainerInstancesState
                Effect: Allow
                Resource: '*'
              - Action: sns:Publish
                Effect: Allow
                Resource:
                  Ref: SNSTopicECSDrainInstance
              - Action: cloudformation:ListExports
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: LambdaECSDrainInstance
    Type: AWS::IAM::Role
  RoleLambdaECSRunTask:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - ecs:ListContainerInstances
                  - ecs:DescribeContainerInstances
                Effect: Allow
                Resource:
                  - Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/*
                  - Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:container-instance/*
              - Action:
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:Get*
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: LambdaECSRunTask
    Type: AWS::IAM::Role
  SNSSubscriptionCloudWatchAlarm:
    Properties:
      Endpoint: mello+aws@ankot.org
      Protocol: email
      TopicArn:
        Ref: SNSTopicCloudWatchAlarm
    Type: AWS::SNS::Subscription
  SNSSubscriptionECSDrainInstanceLambdaECSDrainInstance:
    Properties:
      Endpoint:
        Fn::GetAtt:
          - LambdaECSDrainInstance
          - Arn
      Protocol: lambda
      TopicArn:
        Ref: SNSTopicECSDrainInstance
    Type: AWS::SNS::Subscription
  SNSTopicCloudWatchAlarm:
    Properties:
      DisplayName:
        Fn::Sub: ${AWS::StackName}.${EnvRole}-SNSCloudWatchAlarm
    Type: AWS::SNS::Topic
  SNSTopicECSDrainInstance:
    Properties:
      DisplayName:
        Fn::Sub: ${AWS::StackName}.${EnvRole}-SNSECSDrainInstance
    Type: AWS::SNS::Topic
  SecurityGroupBaseInstance:
    Properties:
      GroupDescription: Enable ICMP Ping [ALL] and SSH [192.168.36.0/23]
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 8
          IpProtocol: icmp
          ToPort: -1
      VpcId:
        Fn::ImportValue: VpcId
    Type: AWS::EC2::SecurityGroup
  SecurityGroupLoadBalancerApplicationExternal:
    Properties:
      GroupDescription: Assign to LoadBalancerApplicationExternal
      VpcId:
        Fn::ImportValue: VpcId
    Type: AWS::EC2::SecurityGroup
  SecurityGroupLoadBalancerApplicationInternal:
    Properties:
      GroupDescription: Assign to LoadBalancerApplicationInternal
      VpcId:
        Fn::ImportValue: VpcId
    Type: AWS::EC2::SecurityGroup

