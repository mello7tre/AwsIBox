AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  BaseRegion:
    Fn::Equals:
      - eu-west-1
      - Ref: AWS::Region
  SubnetCidrBlockPrivateAOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPrivateA
          - ''
  SubnetCidrBlockPrivateBOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPrivateB
          - ''
  SubnetCidrBlockPrivateCOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPrivateC
          - ''
  SubnetCidrBlockPrivateDOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPrivateD
          - ''
  SubnetCidrBlockPrivateEOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPrivateE
          - ''
  SubnetCidrBlockPrivateFOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPrivateF
          - ''
  SubnetCidrBlockPublicAOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPublicA
          - ''
  SubnetCidrBlockPublicBOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPublicB
          - ''
  SubnetCidrBlockPublicCOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPublicC
          - ''
  SubnetCidrBlockPublicDOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPublicD
          - ''
  SubnetCidrBlockPublicEOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPublicE
          - ''
  SubnetCidrBlockPublicFOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: SubnetCidrBlockPublicF
          - ''
  ZoneA:
    Fn::Equals:
      - Fn::FindInMap:
          - AvabilityZones
          - Ref: AWS::Region
          - Zone0
      - 'True'
  ZoneB:
    Fn::Equals:
      - Fn::FindInMap:
          - AvabilityZones
          - Ref: AWS::Region
          - Zone1
      - 'True'
  ZoneC:
    Fn::Equals:
      - Fn::FindInMap:
          - AvabilityZones
          - Ref: AWS::Region
          - Zone2
      - 'True'
  ZoneD:
    Fn::Equals:
      - Fn::FindInMap:
          - AvabilityZones
          - Ref: AWS::Region
          - Zone3
      - 'True'
  ZoneE:
    Fn::Equals:
      - Fn::FindInMap:
          - AvabilityZones
          - Ref: AWS::Region
          - Zone4
      - 'True'
  ZoneF:
    Fn::Equals:
      - Fn::FindInMap:
          - AvabilityZones
          - Ref: AWS::Region
          - Zone5
      - 'True'
Description: vpc (Generated by awsibox 0.2.20) [res]
Mappings:
  AvabilityZones:
    eu-central-1:
      Zone0: 'True'
      Zone1: 'True'
      Zone2: 'True'
      Zone3: 'False'
      Zone4: 'False'
      Zone5: 'False'
    eu-west-1:
      Zone0: 'True'
      Zone1: 'True'
      Zone2: 'True'
      Zone3: 'False'
      Zone4: 'False'
      Zone5: 'False'
    us-east-1:
      Zone0: 'True'
      Zone1: 'True'
      Zone2: 'True'
      Zone3: 'True'
      Zone4: 'True'
      Zone5: 'True'
Outputs:
  BrandDomain:
    Value: numenor.arda
  EIPNat:
    Value:
      Ref: EIPNat
  Env:
    Value:
      Ref: Env
  EnvRole:
    Value:
      Ref: EnvRole
  EnvStackVersion:
    Value:
      Ref: EnvStackVersion
  RouteTablePrivate:
    Export:
      Name: RouteTablePrivate
    Value:
      Ref: RouteTablePrivate
  StackType:
    Value: res
  SubnetsPrivate:
    Export:
      Name: SubnetsPrivate
    Value:
      Fn::Join:
        - ','
        - - Fn::If:
              - ZoneA
              - Ref: SubnetPrivateA
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneB
              - Ref: SubnetPrivateB
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneC
              - Ref: SubnetPrivateC
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneD
              - Ref: SubnetPrivateD
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneE
              - Ref: SubnetPrivateE
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneF
              - Ref: SubnetPrivateF
              - Ref: AWS::NoValue
  SubnetsPublic:
    Export:
      Name: SubnetsPublic
    Value:
      Fn::Join:
        - ','
        - - Fn::If:
              - ZoneA
              - Ref: SubnetPublicA
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneB
              - Ref: SubnetPublicB
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneC
              - Ref: SubnetPublicC
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneD
              - Ref: SubnetPublicD
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneE
              - Ref: SubnetPublicE
              - Ref: AWS::NoValue
          - Fn::If:
              - ZoneF
              - Ref: SubnetPublicF
              - Ref: AWS::NoValue
  VPCCidr:
    Export:
      Name: VPCCidr
    Value:
      Fn::GetAtt:
        - VPC
        - CidrBlock
  VpcId:
    Export:
      Name: VpcId
    Value:
      Ref: VPC
Parameters:
  Env:
    AllowedValues:
      - dev
      - stg
      - prod
    Default: dev
    Description: Environment
    Type: String
  EnvRole:
    AllowedPattern: ^[a-zA-Z0-9-_.]*$
    Default: ''
    Description: Service Role
    Type: String
  EnvShort:
    AllowedValues:
      - dev
      - stg
      - prd
    Default: dev
    Description: Environment Short - NEVER CHANGE!
    Type: String
  EnvStackVersion:
    Default: '1'
    Description: Stack version, if changed with UpdateMode=Cfn triggers cfn-hup
    Type: String
  SubnetCidrBlockPrivateA:
    Default: 10.80.0.0/20
    Description: Ip Class Range for Private Subnet in Zone A
    Type: String
  SubnetCidrBlockPrivateB:
    Default: 10.80.16.0/20
    Description: Ip Class Range for Private Subnet in Zone B
    Type: String
  SubnetCidrBlockPrivateC:
    Default: 10.80.32.0/20
    Description: Ip Class Range for Private Subnet in Zone C
    Type: String
  SubnetCidrBlockPrivateD:
    Default: 10.80.48.0/20
    Description: Ip Class Range for Private Subnet in Zone D
    Type: String
  SubnetCidrBlockPrivateE:
    Default: 10.80.64.0/20
    Description: Ip Class Range for Private Subnet in Zone E
    Type: String
  SubnetCidrBlockPrivateF:
    Default: 10.80.80.0/20
    Description: Ip Class Range for Private Subnet in Zone F
    Type: String
  SubnetCidrBlockPublicA:
    Default: 10.80.200.0/24
    Description: Ip Class Range for Public Subnet in zone A
    Type: String
  SubnetCidrBlockPublicB:
    Default: 10.80.201.0/24
    Description: Ip Class Range for Public Subnet in zone B
    Type: String
  SubnetCidrBlockPublicC:
    Default: 10.80.202.0/24
    Description: Ip Class Range for Public Subnet in zone C
    Type: String
  SubnetCidrBlockPublicD:
    Default: 10.80.203.0/24
    Description: Ip Class Range for Public Subnet in zone D
    Type: String
  SubnetCidrBlockPublicE:
    Default: 10.80.204.0/24
    Description: Ip Class Range for Public Subnet in zone E
    Type: String
  SubnetCidrBlockPublicF:
    Default: 10.80.205.0/24
    Description: Ip Class Range for Public Subnet in zone F
    Type: String
  VPCCidrBlock:
    Default: 10.80.0.0/16
    Description: CIDR Block for VPC
    Type: String
  VPCName:
    Default: ''
    Description: VPC Tag Name
    Type: String
Resources:
  EIPNat:
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  InternetGateway:
    Properties:
      Tags:
        - Key: Name
          Value:
            Ref: VPCName
    Type: AWS::EC2::InternetGateway
  NatGateway:
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIPNat
          - AllocationId
      SubnetId:
        Ref: SubnetPublicA
    Type: AWS::EC2::NatGateway
  RouteInternetGateway:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: InternetGateway
      RouteTableId:
        Ref: RouteTablePublic
    Type: AWS::EC2::Route
  RouteNatGateway:
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NatGateway
      RouteTableId:
        Ref: RouteTablePrivate
    Type: AWS::EC2::Route
  RouteTablePrivate:
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-Private
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  RouteTablePublic:
    Properties:
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-Public
      VpcId:
        Ref: VPC
    Type: AWS::EC2::RouteTable
  SubnetPrivateA:
    Condition: ZoneA
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      CidrBlock:
        Ref: SubnetCidrBlockPrivateA
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PrivateA
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPrivateB:
    Condition: ZoneB
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      CidrBlock:
        Ref: SubnetCidrBlockPrivateB
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PrivateB
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPrivateC:
    Condition: ZoneC
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      CidrBlock:
        Ref: SubnetCidrBlockPrivateC
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PrivateC
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPrivateD:
    Condition: ZoneD
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}d
      CidrBlock:
        Ref: SubnetCidrBlockPrivateD
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PrivateD
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPrivateE:
    Condition: ZoneE
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}e
      CidrBlock:
        Ref: SubnetCidrBlockPrivateE
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PrivateE
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPrivateF:
    Condition: ZoneF
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}f
      CidrBlock:
        Ref: SubnetCidrBlockPrivateF
      MapPublicIpOnLaunch: 'false'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PrivateF
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPublicA:
    Condition: ZoneA
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}a
      CidrBlock:
        Ref: SubnetCidrBlockPublicA
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PublicA
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPublicB:
    Condition: ZoneB
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}b
      CidrBlock:
        Ref: SubnetCidrBlockPublicB
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PublicB
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPublicC:
    Condition: ZoneC
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}c
      CidrBlock:
        Ref: SubnetCidrBlockPublicC
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PublicC
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPublicD:
    Condition: ZoneD
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}d
      CidrBlock:
        Ref: SubnetCidrBlockPublicD
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PublicD
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPublicE:
    Condition: ZoneE
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}e
      CidrBlock:
        Ref: SubnetCidrBlockPublicE
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PublicE
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetPublicF:
    Condition: ZoneF
    Properties:
      AvailabilityZone:
        Fn::Sub: ${AWS::Region}f
      CidrBlock:
        Ref: SubnetCidrBlockPublicF
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value:
            Fn::Sub: ${VPCName}-PublicF
      VpcId:
        Ref: VPC
    Type: AWS::EC2::Subnet
  SubnetRouteTableAssociationPrivateA:
    Condition: ZoneA
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: SubnetPrivateA
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPrivateB:
    Condition: ZoneB
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: SubnetPrivateB
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPrivateC:
    Condition: ZoneC
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: SubnetPrivateC
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPrivateD:
    Condition: ZoneD
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: SubnetPrivateD
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPrivateE:
    Condition: ZoneE
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: SubnetPrivateE
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPrivateF:
    Condition: ZoneF
    Properties:
      RouteTableId:
        Ref: RouteTablePrivate
      SubnetId:
        Ref: SubnetPrivateF
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPublicA:
    Condition: ZoneA
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: SubnetPublicA
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPublicB:
    Condition: ZoneB
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: SubnetPublicB
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPublicC:
    Condition: ZoneC
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: SubnetPublicC
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPublicD:
    Condition: ZoneD
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: SubnetPublicD
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPublicE:
    Condition: ZoneE
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: SubnetPublicE
    Type: AWS::EC2::SubnetRouteTableAssociation
  SubnetRouteTableAssociationPublicF:
    Condition: ZoneF
    Properties:
      RouteTableId:
        Ref: RouteTablePublic
      SubnetId:
        Ref: SubnetPublicF
    Type: AWS::EC2::SubnetRouteTableAssociation
  VPC:
    Properties:
      CidrBlock:
        Ref: VPCCidrBlock
      EnableDnsHostnames: 'true'
      EnableDnsSupport: 'true'
      Tags:
        - Key: Name
          Value:
            Ref: VPCName
    Type: AWS::EC2::VPC
  VPCGatewayAttachment:
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: VPC
    Type: AWS::EC2::VPCGatewayAttachment

