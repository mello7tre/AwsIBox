AWSTemplateFormatVersion: '2010-09-09'
Conditions:
  BaseRegion:
    Fn::Equals:
      - eu-west-1
      - Ref: AWS::Region
  EventsRuleEC2NotificationStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleEC2NotificationState
          - ''
  EventsRuleEC2StartTaggedScheduleExpressionOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleEC2StartTaggedScheduleExpression
          - ''
  EventsRuleEC2StartTaggedStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleEC2StartTaggedState
          - ''
  EventsRuleEC2StopTaggedScheduleExpressionOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleEC2StopTaggedScheduleExpression
          - ''
  EventsRuleEC2StopTaggedStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleEC2StopTaggedState
          - ''
  EventsRuleECSEventServiceFailureSpotStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleECSEventServiceFailureSpotState
          - ''
  EventsRuleECSEventServiceFailureStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleECSEventServiceFailureState
          - ''
  EventsRuleECSEventServiceSteadySpotStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleECSEventServiceSteadySpotState
          - ''
  EventsRuleECSEventTaskStateChangeSpotStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleECSEventTaskStateChangeSpotState
          - ''
  EventsRuleECSEventTaskStateChangeStateOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: EventsRuleECSEventTaskStateChangeState
          - ''
  LambdaECSEventsCodeS3KeyOverride:
    Fn::Not:
      - Fn::Equals:
          - Ref: LambdaECSEventsCodeS3Key
          - ''
  LambdaECSEventsLayers0:
    Fn::Or:
      - Fn::And:
          - Condition: LambdaECSEventsLayers0Override
          - Fn::Not:
              - Fn::Equals:
                  - Ref: LambdaECSEventsLayers0
                  - ''
      - Fn::And:
          - Fn::Not:
              - Condition: LambdaECSEventsLayers0Override
          - Fn::Not:
              - Fn::Equals:
                  - Fn::Select:
                      - 0
                      - - ''
                  - ''
  LambdaECSEventsLayers0Override:
    Fn::Not:
      - Fn::Equals:
          - Ref: LambdaECSEventsLayers0
          - ''
Description: res-event-01 (Generated by awsibox 0.2.20) [res]
Outputs:
  BrandDomain:
    Value: aman.arda
  Env:
    Value:
      Ref: Env
  EnvRole:
    Value:
      Ref: EnvRole
  EnvStackVersion:
    Value:
      Ref: EnvStackVersion
  EventsRuleEC2NotificationState:
    Value:
      Fn::If:
        - EventsRuleEC2NotificationStateOverride
        - Ref: EventsRuleEC2NotificationState
        - ENABLED
  EventsRuleEC2StartTaggedScheduleExpression:
    Value:
      Fn::If:
        - EventsRuleEC2StartTaggedScheduleExpressionOverride
        - Ref: EventsRuleEC2StartTaggedScheduleExpression
        - cron(00 6 ? * mon-fri *)
  EventsRuleEC2StartTaggedState:
    Value:
      Fn::If:
        - EventsRuleEC2StartTaggedStateOverride
        - Ref: EventsRuleEC2StartTaggedState
        - DISABLED
  EventsRuleEC2StopTaggedScheduleExpression:
    Value:
      Fn::If:
        - EventsRuleEC2StopTaggedScheduleExpressionOverride
        - Ref: EventsRuleEC2StopTaggedScheduleExpression
        - cron(0 19 * * ? *)
  EventsRuleEC2StopTaggedState:
    Value:
      Fn::If:
        - EventsRuleEC2StopTaggedStateOverride
        - Ref: EventsRuleEC2StopTaggedState
        - DISABLED
  EventsRuleECSEventServiceFailureSpotState:
    Value:
      Fn::If:
        - EventsRuleECSEventServiceFailureSpotStateOverride
        - Ref: EventsRuleECSEventServiceFailureSpotState
        - DISABLED
  EventsRuleECSEventServiceFailureState:
    Value:
      Fn::If:
        - EventsRuleECSEventServiceFailureStateOverride
        - Ref: EventsRuleECSEventServiceFailureState
        - DISABLED
  EventsRuleECSEventServiceSteadySpotState:
    Value:
      Fn::If:
        - EventsRuleECSEventServiceSteadySpotStateOverride
        - Ref: EventsRuleECSEventServiceSteadySpotState
        - DISABLED
  EventsRuleECSEventTaskStateChangeSpotState:
    Value:
      Fn::If:
        - EventsRuleECSEventTaskStateChangeSpotStateOverride
        - Ref: EventsRuleECSEventTaskStateChangeSpotState
        - DISABLED
  EventsRuleECSEventTaskStateChangeState:
    Value:
      Fn::If:
        - EventsRuleECSEventTaskStateChangeStateOverride
        - Ref: EventsRuleECSEventTaskStateChangeState
        - DISABLED
  LambdaECSEventsCodeS3Key:
    Value:
      Fn::If:
        - LambdaECSEventsCodeS3KeyOverride
        - Ref: LambdaECSEventsCodeS3Key
        - ibox-tools/ecs-events/master-444dd76.zip
  StackType:
    Value: res
Parameters:
  Env:
    AllowedValues:
      - dev
      - stg
      - prod
    Default: dev
    Description: Environment
    Type: String
  EnvRole:
    AllowedPattern: ^[a-zA-Z0-9-_.]*$
    Default: ''
    Description: Service Role
    Type: String
  EnvShort:
    AllowedValues:
      - dev
      - stg
      - prd
    Default: dev
    Description: Environment Short - NEVER CHANGE!
    Type: String
  EnvStackVersion:
    Default: '1'
    Description: Stack version, if changed with UpdateMode=Cfn triggers cfn-hup
    Type: String
  EventsRuleEC2NotificationState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleEC2StartTaggedScheduleExpression:
    Default: ''
    Description: Events Rule Schedule - empty for default based on env/role
    Type: String
  EventsRuleEC2StartTaggedState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleEC2StopTaggedScheduleExpression:
    Default: ''
    Description: Events Rule Schedule - empty for default based on env/role
    Type: String
  EventsRuleEC2StopTaggedState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleECSEventServiceFailureSpotState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleECSEventServiceFailureState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleECSEventServiceSteadySpotState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleECSEventTaskStateChangeSpotState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  EventsRuleECSEventTaskStateChangeState:
    AllowedValues:
      - ''
      - DISABLED
      - ENABLED
    Default: ''
    Description: Events Rule State - empty for default based on env/role
    Type: String
  LambdaECSEventsCodeS3Key:
    Default: ''
    Description: S3Key Name for lambda ECSEvents Code
    Type: String
  LambdaECSEventsLayers0:
    Default: ''
    Description: LambdaECSEventsLayers0
    Type: String
Resources:
  EventsRuleEC2Notification:
    Properties:
      Description: EC2 Instance State-change Notification
      EventPattern:
        detail:
          state:
            - running
            - shutting-down
        detail-type:
          - EC2 Instance State-change Notification
        source:
          - aws.ec2
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleEC2Notification
      State:
        Fn::If:
          - EventsRuleEC2NotificationStateOverride
          - Ref: EventsRuleEC2NotificationState
          - ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaServiceDiscovery
              - Arn
          Id: TargetFunction-01
        - Arn:
            Fn::GetAtt:
              - LambdaR53RecordInstanceId
              - Arn
          Id: TargetFunction-02
    Type: AWS::Events::Rule
  EventsRuleEC2StartTagged:
    Properties:
      Description: Cron based invocation of LambdaEC2StartStopTagged - Start
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleEC2StartTagged
      ScheduleExpression:
        Fn::If:
          - EventsRuleEC2StartTaggedScheduleExpressionOverride
          - Ref: EventsRuleEC2StartTaggedScheduleExpression
          - cron(00 6 ? * mon-fri *)
      State:
        Fn::If:
          - EventsRuleEC2StartTaggedStateOverride
          - Ref: EventsRuleEC2StartTaggedState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaEC2StartStopTagged
              - Arn
          Id: TargetFunction-01
          Input: '{"Action": "start"}'
    Type: AWS::Events::Rule
  EventsRuleEC2StopTagged:
    Properties:
      Description: Cron based invocation of LambdaEC2StartStopTagged - Stop
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleEC2StopTagged
      ScheduleExpression:
        Fn::If:
          - EventsRuleEC2StopTaggedScheduleExpressionOverride
          - Ref: EventsRuleEC2StopTaggedScheduleExpression
          - cron(0 19 * * ? *)
      State:
        Fn::If:
          - EventsRuleEC2StopTaggedStateOverride
          - Ref: EventsRuleEC2StopTaggedState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaEC2StartStopTagged
              - Arn
          Id: TargetFunction-01
          Input: '{"Action": "stop"}'
    Type: AWS::Events::Rule
  EventsRuleECSEventServiceFailure:
    Properties:
      Description: ECSEvents Lambda Trigger for Cpu and Memory Failure
      EventPattern:
        detail:
          eventName:
            - SERVICE_TASK_PLACEMENT_FAILURE
          eventType:
            - ERROR
          reason:
            - RESOURCE:MEMORY
            - RESOURCE:CPU
        detail-type:
          - ECS Service Action
        source:
          - aws.ecs
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleECSEventServiceFailure
      State:
        Fn::If:
          - EventsRuleECSEventServiceFailureStateOverride
          - Ref: EventsRuleECSEventServiceFailureState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaECSEvents
              - Arn
          Id: TargetFunction-01
    Type: AWS::Events::Rule
  EventsRuleECSEventServiceFailureSpot:
    Properties:
      Description: ECSEvents Lambda Trigger for Spot Failure
      EventPattern:
        detail:
          eventName:
            - SERVICE_TASK_PLACEMENT_FAILURE
          eventType:
            - ERROR
          reason:
            - RESOURCE:FARGATE
        detail-type:
          - ECS Service Action
        source:
          - aws.ecs
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleECSEventServiceFailureSpot
      State:
        Fn::If:
          - EventsRuleECSEventServiceFailureSpotStateOverride
          - Ref: EventsRuleECSEventServiceFailureSpotState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaECSEvents
              - Arn
          Id: TargetFunction-01
    Type: AWS::Events::Rule
  EventsRuleECSEventServiceSteadySpot:
    Properties:
      Description: ECSEvents Lambda Trigger for Spot Capacity Provider Steady State
      EventPattern:
        detail:
          capacityProviderArns:
            - Fn::Sub: arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:capacity-provider/FARGATE_SPOT
          eventName:
            - CAPACITY_PROVIDER_STEADY_STATE
          eventType:
            - INFO
        detail-type:
          - ECS Service Action
        source:
          - aws.ecs
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleECSEventServiceSteadySpot
      State:
        Fn::If:
          - EventsRuleECSEventServiceSteadySpotStateOverride
          - Ref: EventsRuleECSEventServiceSteadySpotState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaECSEvents
              - Arn
          Id: TargetFunction-01
    Type: AWS::Events::Rule
  EventsRuleECSEventTaskStateChange:
    Properties:
      Description: ECSEvents Lambda Trigger for Task STOPPED
      EventPattern:
        detail:
          desiredStatus:
            - STOPPED
          lastStatus:
            - STOPPED
          stopCode:
            - EssentialContainerExited
        detail-type:
          - ECS Task State Change
        source:
          - aws.ecs
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleECSEventTaskStateChange
      State:
        Fn::If:
          - EventsRuleECSEventTaskStateChangeStateOverride
          - Ref: EventsRuleECSEventTaskStateChangeState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaECSEvents
              - Arn
          Id: TargetFunction-01
    Type: AWS::Events::Rule
  EventsRuleECSEventTaskStateChangeSpot:
    Properties:
      Description: ECSEvents Lambda Trigger for Task Spot RUNNING
      EventPattern:
        detail:
          capacityProviderName:
            - FARGATE_SPOT
          desiredStatus:
            - RUNNING
          lastStatus:
            - RUNNING
          launchType:
            - FARGATE
        detail-type:
          - ECS Task State Change
        source:
          - aws.ecs
      Name:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-RuleECSEventTaskStateChangeSpot
      State:
        Fn::If:
          - EventsRuleECSEventTaskStateChangeSpotStateOverride
          - Ref: EventsRuleECSEventTaskStateChangeSpotState
          - DISABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - LambdaECSEvents
              - Arn
          Id: TargetFunction-01
    Type: AWS::Events::Rule
  IAMPolicyLambdaEC2StartStopTagged:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ec2:StartInstances
              - ec2:StopInstances
            Effect: Allow
            Resource: arn:aws:ec2:*:*:instance/*
        Version: '2012-10-17'
      PolicyName: LambdaEC2StartStopTagged
      Roles:
        - Ref: RoleLambdaEC2StartStopTagged
    Type: AWS::IAM::Policy
  IAMPolicyLambdaECSEvents:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - ecs:DescribeContainerInstances
              - ecs:DescribeServices
              - ecs:UpdateService
              - cloudwatch:SetAlarmState
              - cloudwatch:DisableAlarmActions
              - cloudwatch:EnableAlarmActions
              - events:PutRule
              - events:DeleteRule
              - events:PutTargets
              - events:RemoveTargets
              - lambda:AddPermission
              - lambda:RemovePermission
            Effect: Allow
            Resource: '*'
          - Action: sns:Publish
            Effect: Allow
            Resource:
              Fn::ImportValue: SNSTopicCloudWatchAlarm
        Version: '2012-10-17'
      PolicyName: LambdaECSEvents
      Roles:
        - Ref: RoleLambdaECSEvents
    Type: AWS::IAM::Policy
  IAMPolicyLambdaR53RecordInstanceId:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - sns:Publish
            Effect: Allow
            Resource:
              Ref: SNSTopicASGNotificationR53
          - Action:
              - route53:ChangeResourceRecordSets
              - route53:ListResourceRecordSets
            Effect: Allow
            Resource: arn:aws:route53:::*
        Version: '2012-10-17'
      PolicyName: LambdaR53RecordInstanceId
      Roles:
        - Ref: RoleLambdaR53RecordInstanceId
    Type: AWS::IAM::Policy
  IAMPolicyLambdaServiceDiscovery:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - servicediscovery:ListServices
              - servicediscovery:CreateService
              - servicediscovery:DeleteService
              - servicediscovery:RegisterInstance
              - servicediscovery:DeRegisterInstance
              - servicediscovery:GetOperation
              - servicediscovery:GetNameSpace
            Effect: Allow
            Resource: '*'
          - Action:
              - route53:ChangeResourceRecordSets
            Effect: Allow
            Resource: arn:aws:route53:::*
        Version: '2012-10-17'
      PolicyName: LambdaServiceDiscovery
      Roles:
        - Ref: RoleLambdaServiceDiscovery
    Type: AWS::IAM::Policy
  IAMPolicyParameterStore:
    Properties:
      PolicyDocument:
        Statement:
          - Action: kms:Decrypt
            Effect: Allow
            Resource:
              Fn::ImportValue: KeyParameterStore
          - Action: ssm:DescribeParameters
            Effect: Allow
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:*
          - Action: ssm:GetParameters
            Effect: Allow
            Resource:
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvRole}/*
              - Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/${EnvRole}/*
        Version: '2012-10-17'
      PolicyName: ParameterStore
      Roles:
        - Ref: RoleLambdaECSEvents
    Type: AWS::IAM::Policy
  LambdaEC2StartStopTagged:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - "# vim: ft=python\n"
              - "import boto3\n"
              - "import datetime\n"
              - "import os\n"
              - "import json\n"
              - "\n"
              - "TAGNAME = os.environ['TagName']\n"
              - "\n"
              - "def lambda_handler(event, context):\n"
              - "    ec2 = boto3.resource('ec2')\n"
              - "    client = boto3.client('ec2')\n"
              - "    action = event['Action']\n"
              - "\n"
              - "    #filter for instances with the correct tag\n"
              - "    #instances = ec2.instances.filter(Filters=[{'Name': 'tag-key',\
                \ 'Values':[TAGNAME]}])\n"
              - "    instances = ec2.instances.filter(Filters=[{'Name': 'tag:' + TAGNAME,\
                \ 'Values': ['1']}])\n"
              - "\n"
              - "    for instance in instances:\n"
              - "        if action == 'start':\n"
              - "            client.start_instances(InstanceIds=[instance.id])\n"
              - "        if action == 'stop':\n"
              - "            client.stop_instances(InstanceIds=[instance.id])\n"
              - "        print(instance.id + ' ' + action)\n"
      Description: Start and Stop EC2 Tagged Instances
      Environment:
        Variables:
          Env:
            Ref: EnvShort
          EnvRole:
            Ref: EnvRole
          TagName: AutoStartStop
      FunctionName:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-EC2StartStopTagged
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoleLambdaEC2StartStopTagged
          - Arn
      Runtime: python2.7
      Timeout: 10
    Type: AWS::Lambda::Function
  LambdaECSEvents:
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: ${AWS::Region}-arda-aman-app-repository
        S3Key:
          Fn::If:
            - LambdaECSEventsCodeS3KeyOverride
            - Ref: LambdaECSEventsCodeS3Key
            - ibox-tools/ecs-events/master-444dd76.zip
      Description: ECSEvents
      Environment:
        Variables:
          Env:
            Ref: EnvShort
          EnvRole:
            Ref: EnvRole
          SNSTopic:
            Fn::ImportValue: SNSTopicCloudWatchAlarm
      FunctionName:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-ECSEvents
      Handler: index.lambda_handler
      Layers:
        - Fn::If:
            - LambdaECSEventsLayers0
            - Fn::If:
                - LambdaECSEventsLayers0Override
                - Ref: LambdaECSEventsLayers0
                - Fn::Select:
                    - 0
                    - - ''
            - Ref: AWS::NoValue
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoleLambdaECSEvents
          - Arn
      Runtime: python3.7
      Timeout: 30
    Type: AWS::Lambda::Function
  LambdaPermissionEC2StartStopTaggedEventsRuleEC2StartTagged:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaEC2StartStopTagged
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleEC2StartTagged
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionEC2StartStopTaggedEventsRuleEC2StopTagged:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaEC2StartStopTagged
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleEC2StopTagged
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionECSEventsEventsRuleECSEventServiceFailure:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaECSEvents
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleECSEventServiceFailure
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionECSEventsEventsRuleECSEventServiceFailureSpot:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaECSEvents
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleECSEventServiceFailureSpot
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionECSEventsEventsRuleECSEventServiceSteadySpot:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaECSEvents
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleECSEventServiceSteadySpot
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionECSEventsEventsRuleECSEventTaskStateChange:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaECSEvents
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleECSEventTaskStateChange
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionECSEventsEventsRuleECSEventTaskStateChangeSpot:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaECSEvents
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleECSEventTaskStateChangeSpot
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionR53RecordInstanceIdEventsRuleEC2Notification:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaR53RecordInstanceId
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleEC2Notification
          - Arn
    Type: AWS::Lambda::Permission
  LambdaPermissionServiceDiscoveryEventsRuleEC2Notification:
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - LambdaServiceDiscovery
          - Arn
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
          - EventsRuleEC2Notification
          - Arn
    Type: AWS::Lambda::Permission
  LambdaR53RecordInstanceId:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - "# vim: ft=python expandtab shiftwidth=2 softtabstop=2\n"
              - "from __future__ import print_function\n"
              - "import json\n"
              - "import logging\n"
              - "import os\n"
              - "import boto3\n"
              - "import time\n"
              - "\n"
              - "logger = logging.getLogger()\n"
              - "logger.setLevel(logging.INFO)\n"
              - "\n"
              - "hostedzonename = os.environ['HostedZoneName'] + '.'\n"
              - "hostedzoneid = os.environ['HostedZoneId']\n"
              - "\n"
              - "\n"
              - "def publish_to_sns(dnsname, asg_name, e_state):\n"
              - "  message = {\n"
              - "    'AutoScalingGroup': asg_name,\n"
              - "    'Event': 'autoscaling:EC2_INSTANCE_LAUNCH' if e_state == 'runnig'\
                \ else 'autoscaling:EC2_INSTANCE_TERMINATE',\n"
              - "    'DnsName': dnsname,\n"
              - "  }\n"
              - "  sns = boto3.client('sns')\n"
              - "  sns.publish(\n"
              - "    TopicArn=os.environ['Topic'],\n"
              - "    Subject='ASGNotificationR53',\n"
              - "    Message=json.dumps(message)\n"
              - "  )\n"
              - "\n"
              - "\n"
              - "def do_upsert_record_set(route53, instance, zonename, hostedzoneid):\n"
              - "  r53_response = route53.change_resource_record_sets(\n"
              - "    HostedZoneId=hostedzoneid,\n"
              - "    ChangeBatch={'Changes': [{\n"
              - "      'Action': 'UPSERT',\n"
              - "      'ResourceRecordSet': {\n"
              - "        'Name': '{name}.{domain}'.format(name=instance.instance_id,\
                \ domain=zonename),\n"
              - "        'Type': 'CNAME',\n"
              - "         'TTL': 300,\n"
              - "         'ResourceRecords': [{'Value': instance.private_dns_name}]\n"
              - "      }\n"
              - "    }]}\n"
              - "  )\n"
              - "\n"
              - "\n"
              - "def do_delete_record_set(route53, hostedzoneid, r53_resource_record):\n"
              - "  r53_response = route53.change_resource_record_sets(\n"
              - "    HostedZoneId=hostedzoneid,\n"
              - "    ChangeBatch={'Changes': [{\n"
              - "      'Action': 'DELETE',\n"
              - "      'ResourceRecordSet': r53_resource_record\n"
              - "    }]}\n"
              - "  )\n"
              - "\n"
              - "\n"
              - "def get_record_set(route53, instance, zonename, hostedzoneid):\n"
              - "  r53_resource_records = route53.list_resource_record_sets(\n"
              - "    HostedZoneId=hostedzoneid,\n"
              - "    StartRecordName='{name}.{domain}'.format(name=instance.instance_id,\
                \ domain=zonename),\n"
              - "    StartRecordType='CNAME',\n"
              - "    MaxItems='1')['ResourceRecordSets']\n"
              - "\n"
              - "  if len(r53_resource_records) < 1:\n"
              - "    return\n"
              - "\n"
              - "  r53_resource_record=r53_resource_records[0]\n"
              - "\n"
              - "  if r53_resource_record['Name'] != '{name}.{domain}'.format(\n"
              - "    name=instance.instance_id, domain=zonename):\n"
              - "    return\n"
              - "\n"
              - "  return(r53_resource_record)\n"
              - "\n"
              - "\n"
              - "def get_asg_name(tags):\n"
              - "  asgName = None\n"
              - "  stackName = None\n"
              - "  parsedTags = None\n"
              - "  while not parsedTags or (stackName and not asgName):\n"
              - "    time.sleep(0.5)\n"
              - "    for n in tags:\n"
              - "      if n['Key'] == 'aws:cloudformation:stack-name':\n"
              - "        stackName = n['Value']\n"
              - "      if n['Key'] == 'EnvStackName':\n"
              - "        stackName = n['Value']\n"
              - "      if n['Key'] == 'aws:autoscaling:groupName':\n"
              - "        asgName = n['Value']\n"
              - "      if n['Key'] == 'launched-for-asg':\n"
              - "        asgName = n['Value']\n"
              - "    parsedTags = True\n"
              - "\n"
              - "  return asgName\n"
              - "\n"
              - "\n"
              - "def lambda_handler(event, context):\n"
              - "  e_state = event['detail']['state']\n"
              - "  ec2id = event['detail']['instance-id']\n"
              - "  logger.info(e_state + ' ' + ec2id)\n"
              - "\n"
              - "  ec2res = boto3.resource('ec2')\n"
              - "  instance = ec2res.Instance(ec2id)\n"
              - "  logger.info(instance)\n"
              - "  if not instance.tags:\n"
              - "    return\n"
              - "\n"
              - "  asg_name = get_asg_name(instance.tags)\n"
              - "  if not asg_name:\n"
              - "    return\n"
              - "  logger.info(asg_name)\n"
              - "  \n"
              - "  route53 = boto3.client('route53')\n"
              - "\n"
              - "  if e_state == 'running':\n"
              - "    logger.info('Updating/Creating Route53 Record')\n"
              - "    do_upsert_record_set(route53, instance, hostedzonename, hostedzoneid)\n"
              - "\n"
              - "  if e_state == 'shutting-down':\n"
              - "    logger.info('Searching for Route53 Record info')\n"
              - "    r53_resource_record = get_record_set(route53, instance, hostedzonename,\
                \ hostedzoneid)\n"
              - "    if not r53_resource_record:\n"
              - "      return\n"
              - "\n"
              - "    logger.info('Publishing to SNS')\n"
              - "    dnsname = r53_resource_record['ResourceRecords'][0]['Value']\n"
              - "    publish_to_sns(dnsname, asg_name, e_state)\n"
              - "\n"
              - "    logger.info('Deleting Route53 Record: ' + r53_resource_record['Name'])\n"
              - "    do_delete_record_set(route53, hostedzoneid, r53_resource_record)\n"
              - "\n"
              - "  return\n"
      Description: R53 Record InstanceId Automatic Creation
      Environment:
        Variables:
          Env:
            Ref: EnvShort
          EnvRole:
            Ref: EnvRole
          HostedZoneId:
            Fn::ImportValue: HostedZoneIdPrivate
          HostedZoneName: internal.aman.arda
          Topic:
            Ref: SNSTopicASGNotificationR53
      FunctionName:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-R53RecordInstanceId
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoleLambdaR53RecordInstanceId
          - Arn
      Runtime: python2.7
      Timeout: 30
    Type: AWS::Lambda::Function
  LambdaServiceDiscovery:
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - ''
            - - "# vim: ft=python expandtab shiftwidth=2 softtabstop=2\n"
              - "import boto3\n"
              - "import logging\n"
              - "import os\n"
              - "import json\n"
              - "import time\n"
              - "logger = logging.getLogger()\n"
              - "logger.setLevel(logging.INFO)\n"
              - "\n"
              - "def get_servicename(tags):\n"
              - "  role = None\n"
              - "  stackname = None\n"
              - "  parsedTags = None\n"
              - "  while not parsedTags or (stackname and not role):\n"
              - "    time.sleep(0.5)\n"
              - "    for n in tags:\n"
              - "      if n['Key'] == 'EnvRole':\n"
              - "        role = n['Value']\n"
              - "      if n['Key'] == 'aws:cloudformation:stack-name':\n"
              - "        stackname = n['Value']\n"
              - "      if n['Key'] == 'EnvStackName':\n"
              - "        stackname = n['Value']\n"
              - "    parsedTags = True\n"
              - "  if role and stackname:\n"
              - "    return(stackname + '.' + role)\n"
              - "\n"
              - "def get_service(client, namespaceid, servicename):\n"
              - "  service = {}\n"
              - "  paginator = client.get_paginator('list_services')\n"
              - "  response_iterator = paginator.paginate(\n"
              - "    Filters=[{'Name': 'NAMESPACE_ID', 'Values': [namespaceid]}]\n"
              - "  )\n"
              - "  for n in response_iterator:\n"
              - "    for s in n['Services']:\n"
              - "      if s['Name'] == servicename:\n"
              - "        service['Id'] = s['Id']\n"
              - "        #service['InstanceCount'] = s['InstanceCount']\n"
              - "        return(service)\n"
              - "\n"
              - "def create_service(client, namespaceid, servicename):\n"
              - "  response = client.create_service(\n"
              - "    Name=servicename,\n"
              - "    DnsConfig={\n"
              - "      'NamespaceId': namespaceid,\n"
              - "      'DnsRecords': [{'Type': 'A', 'TTL': 300}]\n"
              - "    }\n"
              - "  )\n"
              - "\n"
              - "  return(response['Service']['Id'])\n"
              - "\n"
              - "def register_instance(client, serviceid, instance):\n"
              - "  response = client.register_instance(\n"
              - "    ServiceId=serviceid,\n"
              - "    InstanceId=instance.instance_id,\n"
              - "    Attributes={\n"
              - "      'AWS_INSTANCE_IPV4': instance.private_ip_address\n"
              - "    }\n"
              - "  )\n"
              - "\n"
              - "  return(response)\n"
              - "\n"
              - "def do_upsert_record_set(client, aliasname, hostedzoneid, namespace_hostedzoneid,\
                \ action):\n"
              - "  response = client.change_resource_record_sets(\n"
              - "    HostedZoneId=hostedzoneid,\n"
              - "    ChangeBatch={'Changes': [{\n"
              - "      'Action': action,\n"
              - "      'ResourceRecordSet': {\n"
              - "        'Name': aliasname,\n"
              - "        'Type': 'A',\n"
              - "        'AliasTarget': {\n"
              - "          'DNSName': aliasname,\n"
              - "          'HostedZoneId': namespace_hostedzoneid,\n"
              - "          'EvaluateTargetHealth': True,\n"
              - "        }\n"
              - "      }\n"
              - "   }]}\n"
              - "  )\n"
              - "\n"
              - "def lambda_handler(event, context):\n"
              - "  namespaceid = os.environ['NameSpaceID']\n"
              - "  e_state = event['detail']['state']\n"
              - "  ec2id = event['detail']['instance-id']\n"
              - "  logger.info(e_state + ' ' + ec2id)\n"
              - "\n"
              - "  discoveryclient = boto3.client('servicediscovery')\n"
              - "  r53client = boto3.client('route53')\n"
              - "  ec2res = boto3.resource('ec2')\n"
              - "\n"
              - "  instance = ec2res.Instance(ec2id)\n"
              - "  logger.info(instance)\n"
              - "  if not instance.tags:\n"
              - "    return\n"
              - "\n"
              - "  servicename = get_servicename(instance.tags)\n"
              - "  if not servicename:\n"
              - "    return\n"
              - "  logger.info(servicename)\n"
              - "\n"
              - "  service = get_service(discoveryclient, namespaceid, servicename)\n"
              - "  namespace_hostedzoneid = discoveryclient.get_namespace(Id=namespaceid)['Namespace']['Properties']['DnsProperties']['HostedZoneId']\n"
              - "  hostedzoneid = os.environ['HostedZoneId']\n"
              - "  aliasname = servicename + '.' + os.environ['PublicDnsNamespaceName']\n"
              - "\n"
              - "  if e_state == 'running':\n"
              - "    serviceid = service['Id'] if service else create_service(discoveryclient,\
                \ namespaceid, servicename)\n"
              - "    logger.info(serviceid)\n"
              - "    do_upsert_record_set(r53client, aliasname, hostedzoneid, namespace_hostedzoneid,\
                \ 'UPSERT')\n"
              - "    registration = register_instance(discoveryclient, serviceid,\
                \ instance)\n"
              - "    response = discoveryclient.get_operation(OperationId=registration['OperationId'])\n"
              - "    logger.info(response)\n"
              - "\n"
              - "  if service and e_state == 'shutting-down':\n"
              - "    discoveryclient.deregister_instance(ServiceId=service['Id'],\
                \ InstanceId=instance.instance_id)\n"
              - "    service = get_service(discoveryclient, namespaceid, servicename)\n"
              - "    #if service['InstanceCount'] == 0:\n"
              - "    #  do_upsert_record_set(r53client, aliasname, hostedzoneid, namespace_hostedzoneid,\
                \ 'DELETE')\n"
              - "    #  discoveryclient.delete_service(Id=service['Id'])\n"
              - "\n"
              - "  return\n"
      Description: ServiceDiscovery
      Environment:
        Variables:
          Env:
            Ref: EnvShort
          EnvRole:
            Ref: EnvRole
          HostedZoneId:
            Fn::ImportValue: HostedZoneIdEnv
          NameSpaceID:
            Fn::ImportValue: ServiceDiscoveryPublicDnsNamespaceId
          PublicDnsNamespaceName:
            Fn::Sub: find.${EnvShort}.aman.arda
      FunctionName:
        Fn::Sub: ${AWS::StackName}-${EnvRole}-ServiceDiscovery
      Handler: index.lambda_handler
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - RoleLambdaServiceDiscovery
          - Arn
      Runtime: python2.7
      Timeout: 30
    Type: AWS::Lambda::Function
  RoleLambdaEC2StartStopTagged:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
    Type: AWS::IAM::Role
  RoleLambdaECSEvents:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
    Type: AWS::IAM::Role
  RoleLambdaR53RecordInstanceId:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
    Type: AWS::IAM::Role
  RoleLambdaServiceDiscovery:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - Ref: AWS::NoValue
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
    Type: AWS::IAM::Role
  SNSTopicASGNotificationR53:
    Properties:
      DisplayName:
        Fn::Sub: ${AWS::StackName}.${EnvRole}-SNSASGNotificationR53
    Type: AWS::SNS::Topic

