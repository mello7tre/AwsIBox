IBoxLoader: !include [
  certificate-global.yml,
  certificate-regional.yml,
  cloudfront-policy.yml,
]

res-extra-01:
  StackType: res
  StackName: r-extra-01
  Parameter:
    - RegionAWSCloudFormationStackSetRoles:
        Description: 'Region where create AWSCloudFormationStackSet Roles'
        AllowedValues: cfg.regions
        Default: cfg.regions[0]
  Condition:
    - RegionAWSCloudFormationStackSetRoles:
        Equals(Ref('RegionAWSCloudFormationStackSetRoles'), Ref('AWS::Region'))
  MappingClass:
    - AZones:
  ApiGatewayAccount: True
  CacheSubnetGroup: True
  DBSubnetGroup: True
  EFSFileSystem:
    - EcsCluster:
        Enabled: None
        R53: None
        Name: EcsCluster
        Encrypted: False
        PerformanceMode: generalPurpose
  IAMPolicy:
    - AssumeRoleAWSCloudFormationStackSetExecutionRole:
        Type: Managed
        Description: 'Assume Role AWSCloudFormationStackSetExecutionRole'
        Condition: 'RegionAWSCloudFormationStackSetRoles'
        Statement:
          - 1:
              Action: 'sts:AssumeRole'
              Resource: 'arn:aws:iam::*:role/AWSCloudFormationStackSetExecutionRole'
  Role:
    - AWSCloudFormationStackSetExecutionRole:
        Condition: 'RegionAWSCloudFormationStackSetRoles'
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/AdministratorAccess'
        Principal: GetAtt('RoleAWSCloudFormationStackSetAdministrationRole', 'Arn')
        PrincipalType: AWS
        RoleName: 'AWSCloudFormationStackSetExecutionRole'
    - AWSCloudFormationStackSetAdministrationRole:
        Condition: 'RegionAWSCloudFormationStackSetRoles'
        ManagedPolicyArns:
          - Ref('IAMPolicyAssumeRoleAWSCloudFormationStackSetExecutionRole')
        Principal: cloudformation.amazonaws.com
        RoleName: 'AWSCloudFormationStackSetAdministrationRole'
  SecurityGroupBase:
    - RDS: 'Assign to RDS Client'
  SNSTopic:
    - CloudFormationNotification:
        Export: True
