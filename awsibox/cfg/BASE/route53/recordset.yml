Base: &base
  IBOX_ENABLED: False

ZoneExternal: &zoneexternal
  <<: *base
  HostedZoneId: get_expvalue('HostedZoneIdEnv')
  Name: Sub('${AWS::StackName}.${EnvRole}.%s' % cfg.HostedZoneNameRegionEnv)

ZoneInternal: &zoneinternal
  <<: *base
  HostedZoneId: get_expvalue('HostedZoneIdPrivate')
  Name: Sub('${AWS::StackName}.${EnvRole}.%s' % cfg.HostedZoneNamePrivate)

LoadBalancer: &loadbalancer
  AliasTarget: &loadbalanceraliastarget
    HostedZoneId: get_endvalue('HostedZoneIdLB')
  Type: A

ECSLoadBalancerTargetExternal: &ecsloadbalancertargetexternal
  AliasTarget:
    <<: *loadbalanceraliastarget
    DNSName: get_subvalue('dualstack.${1E}', f'LoadBalancerApplicationExternalDNS', 'LoadBalancerApplicationStack')

ECSLoadBalancerTargetInternal: &ecsloadbalancertargetinternal
  AliasTarget:
    <<: *loadbalanceraliastarget
    DNSName: get_subvalue('dualstack.${1E}', f'LoadBalancerApplicationInternalDNS', 'LoadBalancerApplicationStack')

EFS: &efs
  <<: *zoneinternal
  Name: Sub("efs-%s.%s" % (IBOX_LINKED_OBJ_INDEX, cfg.HostedZoneNamePrivate))
  ResourceRecords:
    - Sub("${%s}.efs.${AWS::Region}.amazonaws.com" % IBOX_LINKED_OBJ_NAME)
  Type: "CNAME"
  TTL: '300'

CloudFront: &cloudfront
  <<: *zoneexternal
  Condition: RecordSetCloudFront
  AliasTarget:
    DNSName: GetAtt('CloudFrontDistribution', 'DomainName')
    HostedZoneId: cfg.HostedZoneIdCF
  Name: Sub('${EnvRole}${RecordSetCloudFrontSuffix}.cdn.%s' % cfg.HostedZoneNameEnv)
  Type: A

RDS: &rds
  IBOX_OUTPUT:
    - IBOX_MAPNAME:
        Value: Ref(IBOX_MAPNAME)
  Type: CNAME
  ResourceRecords:
    - GetAtt(IBOX_LINKED_OBJ_NAME, 'Endpoint.Address')
  TTL: '300'

CCH: &cch
  IBOX_OUTPUT:
    - _:
        Value: Ref(IBOX_RESNAME)
        Condition: CacheEnabled
  Type: CNAME
  Condition: CacheEnabled
  ResourceRecords:
    If(
      'EngineMemCached',
      [GetAtt('ElastiCacheCacheCluster', 'ConfigurationEndpoint.Address')],
      If(
        'ReplicationGroup',
        [GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address')],
        [GetAtt('ElastiCacheCacheCluster', 'RedisEndpoint.Address')]))
  TTL: '300'

CCHReadOnly: &cchreadonly
  <<: *cch
  IBOX_OUTPUT:
    - _:
        Value: Ref(IBOX_RESNAME)
        Condition: ReplicationGroup
  Condition: ReplicationGroup
  ResourceRecords:
    - >
      Sub(
        '${RECORD0}-ro.${RECORD1}.${RECORD2}.${RECORD3}.${RECORD4}.${RECORD5}.${RECORD6}.${RECORD7}',
        **{
          'RECORD0': Select(0, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD1': Select(1, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD2': Select(2, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD3': Select(3, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD4': Select(4, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD5': Select(5, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD6': Select(6, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
          'RECORD7': Select(7, Split('.', GetAtt('ElastiCacheReplicationGroup', 'PrimaryEndPoint.Address'))),
        })

ApiGatewayDomainName: &apigatewaydomainname
  <<: *zoneexternal
  Type: A
  Name: Ref(IBOX_INDEXNAME)

ApiGatewayDomainNameGlobal: &apigatewaydomainnameglobal
  <<: *apigatewaydomainname
  AliasTarget:
    DNSName: GetAtt(IBOX_INDEXNAME, 'DistributionDomainName')
    HostedZoneId: GetAtt(IBOX_INDEXNAME, 'DistributionHostedZoneId')

ApiGatewayDomainNameRegional: &apigatewaydomainnameregional
  <<: *apigatewaydomainname
  AliasTarget:
    DNSName: GetAtt(IBOX_INDEXNAME, 'RegionalDomainName')
    HostedZoneId: GetAtt(IBOX_INDEXNAME, 'RegionalHostedZoneId')


global:
  Route53RecordSet:
    - EC2LoadBalancerExternal:
        <<: [*zoneexternal, *loadbalancer]
    - EC2LoadBalancerInternal:
        <<: [*zoneinternal, *loadbalancer]
    - ECSLoadBalancerTargetExternalExternal:
        <<: [*zoneexternal, *ecsloadbalancertargetexternal, *loadbalancer]
    - ECSLoadBalancerTargetInternalExternal:
        <<: [*zoneexternal, *ecsloadbalancertargetinternal, *loadbalancer]
    - ECSLoadBalancerTargetInternalInternal:
        <<: [*zoneinternal, *ecsloadbalancertargetinternal, *loadbalancer]
    - ECSLoadBalancerTargetExternalInternal:
        <<: [*zoneinternal, *ecsloadbalancertargetexternal, *loadbalancer]
    - EFS: *efs
    - CloudFront:
        <<: *cloudfront
        IBOX_TITLE: RecordSetCloudFront
    - RDSExternal:
        <<: [*zoneexternal, *rds]
    - RDSInternal:
        <<: [*zoneinternal, *rds]
    - CCHExternal:
        <<: [*zoneexternal, *cch]
        IBOX_RESNAME: RecordSetExternal
    - CCHInternal:
        <<: [*zoneinternal, *cch]
        IBOX_RESNAME: RecordSetInternal
    - CCHReadOnlyExternal:
        <<: [*zoneexternal, *cchreadonly]
        IBOX_RESNAME: RecordSetExternalRO
        Name: Sub('${AWS::StackName}.${EnvRole}_ro.%s' % cfg.HostedZoneNameRegionEnv)
    - CCHReadOnlyInternal:
        <<: [*zoneinternal, *cchreadonly]
        IBOX_RESNAME: RecordSetInternalRO
        Name: Sub('${AWS::StackName}.${EnvRole}_ro.%s' % cfg.HostedZoneNamePrivate)
    - ApiGatewayDomainNameGlobal: *apigatewaydomainnameglobal
    - ApiGatewayDomainNameRegional: *apigatewaydomainnameregional
