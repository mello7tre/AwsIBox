IBoxLoader:
  - !exclude [
      autoscaling-scheduledactions.yml,
      ecs/daemon-reserver-cpu.yml,
      loadbalancing/loadbalancing-elb.yml,
      cloudfront/cloudfront-ios.yml,
  ]
  - !include [
      EC2/TYPE.yml,
      EC2/ecs-cluster.yml,
  ]

global:
  IBOX_LAUNCH_TEMPLATE_NO_SG_EXTRA: True
  IBOX_LAUNCH_TEMPLATE_NO_WAIT_ELB_HEALTH: True
  IBOX_CFN_FUNC: cfn_ecs_cluster
  AutoScalingGroup:
    - Base:
        DesiredCapacity.IBOX_AUTO_P: {}
        DesiredCapacity: 1
        MaxSize.IBOX_AUTO_P: {}
        MaxSize: 10
        MinSize.IBOX_AUTO_P: {}
        MinSize: 1
        CreationPolicy:
          ResourceSignal:
            Count: get_endvalue(f'{IBOX_RESNAME}DesiredCapacity')
        UpdatePolicy:
          AutoScalingRollingUpdate:
            MinInstancesInService: get_endvalue(f'{IBOX_RESNAME}DesiredCapacity')
  ECSCapacityProvider:
    - Base:
        Enabled: 'yes'
        AutoScalingGroupProvider:
          ManagedScaling:
            TargetCapacity: 100
  ECSCluster:
    - Base:
        AgentCfg:
          ECS_RESERVED_MEMORY: 64
  IAMPolicy:
    - ParameterStore:
        Roles:
          - Ref('RoleTask')
  LaunchTemplate:
    - Data:
        NetworkInterfaces:
          - eth0:
              Groups++:
                - ImportValue('SecurityGroupBaseInstance')
  RecordSet: ['External', 'Internal']
  Service:
    - Base:
        Cluster: Ref('Cluster')
  ScalableTarget:
    - Service:
        ResourceId: Sub('service/${Cluster}/${Service.Name}')
