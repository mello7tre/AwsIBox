Base: &base
  IBOXENABLED: False
  Cluster: get_expvalue('Cluster', 'ClusterStack')
  EnableExecuteCommand.IBOXCODE: If(
      'LaunchTypeFarGate',
      If(f'{IBOXRESNAME}EnableExecuteCommandOverride', Ref(f'{IBOXRESNAME}EnableExecuteCommand'), True),
      get_endvalue(f'EnableExecuteCommand'))
  EnableExecuteCommand.IBOXPCO:
    IBOXPARAMETER:
      - IBOXRESNAMEEnableExecuteCommand:
          Description: 'empty for mapped value - Default to True for FARGATE'
          AllowedValues: ['', 'True', 'False']
    IBOXOBJOUTPUT:
      - IBOXRESNAMEEnableExecuteCommand:
          Value: ${EnableExecuteCommand}
  HealthCheckGracePeriodSeconds: eval("0 if cfg.LoadBalancerApplication else Ref('AWS::NoValue')")
  NetworkConfiguration:
    IBOXIF:
      - NetworkModeAwsVpc
      - IBOXIFVALUE
      - Ref('AWS::NoValue')
    AwsvpcConfiguration:
      SecurityGroups: list([GetAtt('SecurityGroupEcsService', 'GroupId')]) + cfg.SecurityGroupsImport
      Subnets: Split(',', get_expvalue('SubnetsPrivate'))
  PlatformVersion: If('LaunchTypeFarGate', 'LATEST', Ref('AWS::NoValue'))
  TaskDefinition: Ref('TaskDefinition')

Replica: &replica
  IBOXPARAMETER:
    - IBOXRESNAMEDeploymentConfigurationMaximumPercent:
        Description: 'empty for mapped value'
    - IBOXRESNAMEDeploymentConfigurationMinimumHealthyPercent:
        Description: 'empty for mapped value'
  IBOXOBJOUTPUT:
    - IBOXRESNAMEDeploymentConfigurationMaximumPercent:
        Value: get_endvalue(f'{IBOXRESNAME}DeploymentConfigurationMaximumPercent')
    - IBOXRESNAMEDeploymentConfigurationMinimumHealthyPercent:
        Value: get_endvalue(f'{IBOXRESNAME}DeploymentConfigurationMinimumHealthyPercent')
  DesiredCount: get_endvalue('CapacityDesired')
  DeploymentConfiguration:
    MaximumPercent: 200
    MinimumHealthyPercent: 100
  LaunchType: If('LaunchTypeFarGate', get_endvalue('LaunchType'), Ref('AWS::NoValue'))
  PlacementStrategies:
    - IBOXIF:
        - LaunchTypeFarGate
        - Ref('AWS::NoValue')
        - IBOXIFVALUE
    - 0:
        IBOXOBJOUTPUT:
          - IBOXRESNAMEPlacementStrategies0:
              Value: Type= ${Type} ,Field= ${Field}
        Type.IBOX_AUTO_P:
          AllowedValues: ['', 'binpack', 'random', 'spread']
        Type: spread
        Field.IBOXPCO:
          IBOXCONDITION:
            - IBOXRESNAMEPlacementStrategies0TypeRandom:
                get_condition('', 'equals', 'random', get_endvalue(f'{IBOXRESNAME}PlacementStrategies0Type'))
        Field.IBOXCODE: If(
          f'{IBOXRESNAME}PlacementStrategies0TypeRandom', Ref('AWS::NoValue'),
          get_endvalue(f'{IBOXRESNAME}PlacementStrategies0Field'))
        Field.IBOX_AUTO_P: {}
        Field: instanceId

#    If('LaunchTypeFarGate', Ref('AWS::NoValue'),
#                          [ecs.PlacementStrategy(Type='spread', Field='instanceId')])
#                          #ecs.PlacementStrategy(Type='spread', Field='attribute:ecs.availability-zone')
  SchedulingStrategy: REPLICA
  
Daemon: &daemon
  SchedulingStrategy: DAEMON
  LaunchType: EC2

Spot: &spot
  CapacityProviderStrategy:
    - FargateSpot:
        Base: 1
        CapacityProvider: FARGATE_SPOT
        Weight: 1
  DesiredCount: get_endvalue('CapacityDesired')


global:
  Service:
    - Base:
        <<: [*base, *replica]
    - Daemon:
        <<: [*base, *daemon]
    - Spot:
        <<: [*base, *spot]

  Condition:
    - EnableExecuteCommand:
        get_condition('', 'equals', True, f'EnableExecuteCommand')
  EnableExecuteCommand: False
