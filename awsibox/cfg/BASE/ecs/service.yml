global:
  ECSService:
    - IBOX_BASE:
        IBOX_ENABLED: False
        Cluster: get_expvalue('Cluster', 'ClusterStack')
        EnableExecuteCommand.IBOX_CODE: If(
            f'{IBOX_RESNAME}EnableExecuteCommandOverride',
            Ref(f'{IBOX_RESNAME}EnableExecuteCommand'),
            If('ECSTasksLaunchOnFargate', True, get_endvalue(f'{IBOX_RESNAME}EnableExecuteCommand', add_override=False)))
        EnableExecuteCommand.IBOX_AUTO_PO:
          Description: 'empty for mapped value - Default to "true" for FARGATE'
          AllowedValues: ['', 'true', 'false']
          Value: ${EnableExecuteCommand}
        EnableExecuteCommand: false
        HealthCheckGracePeriodSeconds: eval("0 if cfg.LoadBalancer else Ref('AWS::NoValue')")
        LaunchType.IBOX_PCO:
          IBOX_CONDITION:
            - ECSTasksLaunchOnFargate:
                get_condition('', 'equals', 'FARGATE', IBOX_CURNAME)
        NetworkConfiguration:
          IBOX_IF:
            - ECSTaskDefinitionBaseNetworkModeAwsVpc
            - IBOX_IFVALUE
            - Ref('AWS::NoValue')
          AwsvpcConfiguration:
            SecurityGroups: list([GetAtt('SecurityGroupEcsService', 'GroupId')]) + cfg.SecurityGroupsImport
            Subnets: Split(',', get_expvalue('SubnetsPrivate'))
        PlatformVersion: If('ECSTasksLaunchOnFargate', 'LATEST', Ref('AWS::NoValue'))
        TaskDefinition: Ref('TaskDefinition')
    - Base:
        IBOX_TITLE: Service
        DesiredCount: get_endvalue('CapacityDesired')
        DeploymentConfiguration:
          DeploymentCircuitBreaker:
            Enable.IBOX_AUTO_PO: {}
            Enable: true
            Rollback.IBOX_AUTO_PO: {}
            Rollback: true
          MaximumPercent.IBOX_AUTO_PO: {}
          MaximumPercent: 200
          MinimumHealthyPercent.IBOX_AUTO_PO: {}
          MinimumHealthyPercent: 100
        PlacementStrategies:
          - IBOX_IF:
              - ECSTasksLaunchOnFargate
              - Ref('AWS::NoValue')
              - IBOX_IFVALUE
          - 0:
              IBOX_OUTPUT:
                - _PlacementStrategies0:
                    Value: Type= ${Type} ,Field= ${Field}
              Type.IBOX_AUTO_P:
                AllowedValues: ['', 'binpack', 'random', 'spread']
              Type: spread
              Field.IBOX_PCO:
                IBOX_CONDITION:
                  - _PlacementStrategies0TypeRandom:
                      get_condition('', 'equals', 'random', f'{IBOX_RESNAME}PlacementStrategies0Type')
              Field.IBOX_AUTO_P: {}
              Field.IBOX_CODE: If(
                f'{IBOX_RESNAME}PlacementStrategies0TypeRandom', Ref('AWS::NoValue'),
                get_endvalue(f'{IBOX_RESNAME}PlacementStrategies0Field'))
              Field: instanceId
      #    If('ECSTasksLaunchOnFargate', Ref('AWS::NoValue'),
      #                          [ecs.PlacementStrategy(Type='spread', Field='instanceId')])
      #                          #ecs.PlacementStrategy(Type='spread', Field='attribute:ecs.availability-zone')
        SchedulingStrategy: REPLICA
    - Daemon:
        SchedulingStrategy: DAEMON
        LaunchType: EC2
    - Spot:
        CapacityProviderStrategy:
          - FargateSpot:
              Base: 1
              CapacityProvider: FARGATE_SPOT
              Weight: 1
        DesiredCount: get_endvalue('CapacityDesired')
