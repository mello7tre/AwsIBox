Base: &base
  IBOX_PARAMETER:
    - EnvApp.IBOX_INDEXNAME.Version:
        Description: str(f'EnvApp{IBOX_INDEXNAME}Version')
        AllowedPattern: '^[a-zA-Z0-9-_.]*$'
    - _Cpu:
        Description: 'Cpu Share - empty for mapped value'
    - _Memory:
        Description: 'Memory hard limit - empty for mapped value'
    - _Command:
        Description: 'Command to execute'
        Type: 'CommaDelimitedList'
    - _LinuxParametersInitProcessEnabled:
        Description: 'Empty for mapped value - "true" if EnableExecuteCommand'
        AllowedValues: ['', 'true', 'false']

  IBOX_CONDITION:
    - _Command: Or(
        Condition(f'{IBOX_RESNAME}CommandOverride'),
        Equals('yes', 'yes' if isinstance(getattr(cfg, f'{IBOX_RESNAME}Command'), list) else 'no'))
    - _ContainerPort:
        get_condition('', 'not_equals', 0, f'{IBOX_RESNAME}ContainerPort')
    - _HostPort:
        get_condition('', 'not_equals', 'none', f'{IBOX_RESNAME}HostPort')
    - EnvApp.IBOX_INDEXNAME.Version:
        Not(Equals('', Ref(f'EnvApp{IBOX_INDEXNAME}Version')))
  IBOX_OUTPUT:
    - EnvApp.IBOX_INDEXNAME.Version:
        Value: Ref(f'EnvApp{IBOX_INDEXNAME}Version')
    - _Command:
        Condition: IBOX_RESNAME.Command
        Value: Join(',', get_endvalue(f'{IBOX_RESNAME}Command')) 
    - _Constraints:
        Value: >-
          Cpu= ${Cpu} ,Memory= ${Memory} ,MemoryReservation= ${MemoryReservation}
    - _Image:
        Value: ${Image}
  Command: Ref('AWS::NoValue')
  ContainerPort: 0
  Cpu: 16
  DockerLabels: 
    LastUpdate: Ref('DockerLabelLastUpdate')
  Environment:
    - Env:
        Name: Env
        Value: Ref('Env')
    - EnvAbbr:
        Name: EnvAbbr
        Value: Ref('EnvShort')
    - EnvRole:
        Name: EnvRole
        Value: Ref('EnvRole')
    - EnvStackName:
        Name: EnvStackName
        Value: Ref('AWS::StackName')
    - EnvRegion:
        Name: EnvRegion
        Value: Ref('AWS::Region')
    - EnvBrand:
        Name: EnvBrand
        Value: cfg.BrandDomain
    - EnvClusterStackName:
        Name: EnvClusterStackName
        Value: get_endvalue('ClusterStack')
  Essential: true
  HostPort: none
  Image: Join('', [
      get_endvalue('EcrAccount'), '.dkr.ecr.', Ref('AWS::Region'), '.amazonaws.com/',
      get_endvalue(f'{IBOX_RESNAME}RepoName' if 'RepoName' in getattr(cfg, IBOX_RESNAME) else 'RepoName'), ':',
      If(
        f'EnvApp{IBOX_INDEXNAME}Version', Ref(f'EnvApp{IBOX_INDEXNAME}Version'), Ref('EnvApp1Version')
      ) if 'RepoName' not in getattr(cfg, IBOX_RESNAME) else Ref(f'EnvApp{IBOX_INDEXNAME}Version'),
    ])
  LinuxParameters:
    InitProcessEnabled: false
    InitProcessEnabled.IBOX_CODE:
      If(f'EnableExecuteCommand', True, get_endvalue(f'{IBOX_RESNAME}LinuxParametersInitProcessEnabled'))
  LogConfiguration:
    IBOX_IF:
      - LogConfiguration
      - IBOX_IFVALUE
      - Ref('AWS::NoValue')
    LogDriver:
      get_endvalue('LogDriver')
    Options:
      awslogs-group: Ref('LogsLogGroup')
      awslogs-region: Ref('AWS::Region')
      awslogs-stream-prefix: Ref('AWS::StackName')
  Memory: 128
  MemoryReservation.IBOX_PCO:
    IBOX_PARAMETER:
      - _MemoryReservation:
          Description: 'Memory soft limit - empty for mapped value - 0 to disable'
    IBOX_CONDITION:
      - _MemoryReservation:
          get_condition('', 'not_equals', '0', f'{IBOX_RESNAME}MemoryReservation')
  MemoryReservation.IBOX_CODE: If(
    f'{IBOX_RESNAME}MemoryReservation', get_endvalue(f'{IBOX_RESNAME}MemoryReservation'), Ref('AWS::NoValue'))
  MemoryReservation: 0
  Name.IBOX_CODE: get_subvalue(
    '${EnvRole}%s' % ('-${1M}' if 'Name' in getattr(cfg, IBOX_RESNAME) else ''), f'{IBOX_RESNAME}Name')
  PortMappings:
    - IBOX_IF:
      - _ContainerPort
      - IBOX_IFVALUE
      - Ref('AWS::NoValue')
    - 0:
        ContainerPort: get_endvalue(f'{IBOX_RESNAME}ContainerPort')
        HostPort: If(
          'NetworkModeAwsVpc',
          get_endvalue(f'{IBOX_RESNAME}ContainerPort'),
          If(f'{IBOX_RESNAME}HostPort', get_endvalue(f'{IBOX_RESNAME}HostPort'), 0))
        Protocol: tcp
  StopTimeout.IBOX_AUTO_PO: {}
  StopTimeout: 30
  UseTaskCpu: 'true'

global:
  ContainerDefinitions:
    - IBOX_BASE: *base
