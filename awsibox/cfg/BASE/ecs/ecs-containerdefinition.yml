Base: &base
  IBOX_PARAMETER:
    - _Cpu:
        Description: 'Cpu Share - empty for mapped value'
    - _Memory:
        Description: 'Memory hard limit - empty for mapped value'
    - _MemoryReservation:
        Description: 'Memory soft limit - empty for mapped value'
    - _Command:
        Description: 'Command to execute'
        Type: 'CommaDelimitedList'
    - _LinuxParametersInitProcessEnabled:
        Description: 'Empty for mapped value - "true" if EnableExecuteCommand'
        AllowedValues: ['', 'true', 'false']
  IBOX_CONDITION:
    - _Command: Or(
        Condition(f'{IBOX_RESNAME}CommandOverride'),
        Equals('yes', 'yes' if isinstance(getattr(cfg, f'{IBOX_RESNAME}Command'), list) else 'no'))
    - _ContainerPort:
        get_condition('', 'not_equals', 0, f'{IBOX_RESNAME}ContainerPort')
    - _HostPort:
        get_condition('', 'not_equals', 'none', f'{IBOX_RESNAME}HostPort')
  IBOX_OUTPUT:
    - _Command:
        Condition: IBOX_RESNAMECommand
        Value: Join(',', get_endvalue(f'{IBOX_RESNAME}Command')) 
    - _Constraints:
        Value: >-
          Cpu= ${Cpu} ,Memory= ${Memory} ,MemoryReservation= ${MemoryReservation}
  Essential: true
  LogConfiguration:
    IBOX_IF:
      - LogConfiguration
      - IBOX_IFVALUE
      - Ref('AWS::NoValue')
    LogDriver:
      get_endvalue('LogDriver')
    Options:
      awslogs-group: Ref('LogsLogGroup')
      awslogs-region: Ref('AWS::Region')
      awslogs-stream-prefix: Ref('AWS::StackName')
  Cpu: 16
  ContainerPort: 0
  HostPort: none
  PortMappings:
    - IBOX_IF:
      - _ContainerPort
      - IBOX_IFVALUE
      - Ref('AWS::NoValue')
    - 0:
        ContainerPort: get_endvalue(f'{IBOX_RESNAME}ContainerPort')
        HostPort: If(
          'NetworkModeAwsVpc',
          get_endvalue(f'{IBOX_RESNAME}ContainerPort'),
          If(f'{IBOX_RESNAME}HostPort', get_endvalue(f'{IBOX_RESNAME}HostPort'), 0))
        Protocol: tcp
  Memory: 128
  MemoryReservation: 64
  Command: Ref('AWS::NoValue')
  Environment:
    - Env:
        Name: Env
        Value: Ref('Env')
    - EnvAbbr:
        Name: EnvAbbr
        Value: Ref('EnvShort')
    - EnvRole:
        Name: EnvRole
        Value: Ref('EnvRole')
    - EnvStackName:
        Name: EnvStackName
        Value: Ref('AWS::StackName')
    - EnvRegion:
        Name: EnvRegion
        Value: Ref('AWS::Region')
    - EnvBrand:
        Name: EnvBrand
        Value: cfg.BrandDomain
    - EnvClusterStackName:
        Name: EnvClusterStackName
        Value: get_endvalue('ClusterStack')
  LinuxParameters:
    InitProcessEnabled: false
    InitProcessEnabled.IBOX_CODE:
      If(f'EnableExecuteCommand', True, get_endvalue(f'{IBOX_RESNAME}LinuxParametersInitProcessEnabled'))
  DockerLabels: 
    LastUpdate: Ref('DockerLabelLastUpdate')


global:
  ContainerDefinitions:
    - IBOX_BASE: *base
