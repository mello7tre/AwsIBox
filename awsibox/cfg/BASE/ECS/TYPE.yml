IBoxLoader: !include
  - autoscaling/capacity.yml
  - application-autoscaling/scalingpolicy.yml
  - application-autoscaling/scalabletarget.yml
  - elasticloadbalancing/base.yml
  - elasticloadbalancing/v2-listener-rule.yml
  - cloudwatch/alarms.yml
  - cloudfront/for-services.yml
  - ecs/ecs-task.yml
  - ecs/ecs-service.yml
  - res-elasticloadbalancing/v2-listener.yml

global:
  Parameter:
    - LoadBalancer:
        Description: "Comma delimited list of enabled LoadBalancerApplication - empty for mapped value - none to disable"
        AllowedValues: ["", "none", "External", "Internal", "External,Internal"]
  Condition:
    - AlarmTargetExternal5XXAndLoadBalancerApplicationExternal:
        And(
          Condition("CloudWatchAlarmTargetExternal5XX"),
          Condition("LoadBalancerApplicationExternal")
        )
    - AlarmTargetInternal5XXAndLoadBalancerApplicationInternal:
        And(
          Condition("CloudWatchAlarmTargetInternal5XX"),
          Condition("LoadBalancerApplicationInternal")
        )
    - ECSServiceDoNotNeedRole:
        Or(
          Condition("ECSTaskDefinitionBaseNetworkModeAwsVpc"),
          And(
            Condition("LoadBalancerApplicationExternal"),
            Condition("LoadBalancerApplicationInternal"),
          )
        )
    - LoadBalancerApplicationExternal:
        Or(
          And(
            Condition("LoadBalancerOverride"),
            Or(
              Equals(Ref("LoadBalancer"), "External"),
              Equals(Ref("LoadBalancer"), "External,Internal"),
            )
          ),
          And(
            Not(Condition("LoadBalancerOverride")),
            Or(
              Equals(get_endvalue("LoadBalancer"), "External"),
              Equals(get_endvalue("LoadBalancer"), "External,Internal"),
            )
          )
        )
    - LoadBalancerApplicationInternal:
        Or(
          And(
            Condition("LoadBalancerOverride"),
            Or(
              Equals(Ref("LoadBalancer"), "Internal"),
              Equals(Ref("LoadBalancer"), "External,Internal"),
            )
          ),
          And(
            Not(Condition("LoadBalancerOverride")),
            Or(
              Equals(get_endvalue("LoadBalancer"), "Internal"),
              Equals(get_endvalue("LoadBalancer"), "External,Internal"),
            )
          )
        )
    - LoadBalancerApplicationNone:
        And(
          Not(Condition("LoadBalancerApplicationExternal")),
          Not(Condition("LoadBalancerApplicationInternal")),
        )
    - LoadBalancerApplicationExternalOrInternal:
        Or(
          Condition("LoadBalancerApplicationExternal"),
          Condition("LoadBalancerApplicationInternal"),
        )
  Output:
    - LoadBalancerApplication:
        Value: get_endvalue('LoadBalancer')
  ApplicationAutoScalingScalableTarget:
    - ECSService:
        ScheduledActions:
          - Down:
              Enabled: 'no'
              CapacityMax: k
              CapacityMin: CapacityMin
              Schedule: 'cron(00 22 * * ? *)'
          - Up:
              Enabled: 'no'
              CapacityMax: k
              CapacityMin: CapacityMin
              Schedule: 'cron(00 06 * * ? *)'
  ApplicationAutoScalingScalingPolicy:
    - Cpu:
        IBOX_ENABLED: True
    - Custom:
        TargetTrackingScalingPolicyConfiguration:
          CustomizedMetricSpecification:
            Dimensions:
              - Cluster:
                  Name: ClusterName
                  Value: get_expvalue('Cluster', 'ClusterStack')
              - Service:
                  Name: ServiceName
                  Value: GetAtt('Service', 'Name')
  CloudFrontDistribution:
    - IBOX_BASE:
        DistributionConfig:
          Origins:
            - Default:
                CustomOriginConfig:
                  HTTPSPort.IBOX_CODE: If(
                    f"{IBOX_CURNAME}Override", Ref(IBOX_CURNAME), get_endvalue("ElasticLoadBalancingV2ListenerECSHttpsExternalPort"))
  CloudWatchAlarm:
    - ECSCPUHigh:
        AlarmActions: [Ref('ApplicationAutoScalingScalingPolicyUp')]
    - ECSCPULow:
        AlarmActions: [Ref('ApplicationAutoScalingScalingPolicyDown')]
    - TargetExternal5XX:
        IBOX_ENABLED: True
        Condition: AlarmTargetExternal5XXAndLoadBalancerApplicationExternal
    - TargetInternal5XX:
        IBOX_ENABLED: True
        Condition: AlarmTargetInternal5XXAndLoadBalancerApplicationInternal
  EC2SecurityGroup:
    - EcsService:
        IBOX_NO_OUTPUT: True
        Condition: ECSTaskDefinitionBaseNetworkModeAwsVpc
        GroupDescription: Enable access to Service
        SecurityGroupIngress:
          - External:
              IBOX_IF:
                - LoadBalancerApplicationExternal
                - IBOX_IFVALUE
                - Ref("AWS::NoValue")
              FromPort: get_endvalue("ContainerDefinitions1ContainerPort")
              IpProtocol: tcp
              SourceSecurityGroupId: ImportValue("SecurityGroupLoadBalancerApplicationExternal")
              ToPort: get_endvalue("ContainerDefinitions1ContainerPort")
          - Internal:
              IBOX_IF:
                - LoadBalancerApplicationInternal
                - IBOX_IFVALUE
                - Ref("AWS::NoValue")
              FromPort: get_endvalue("ContainerDefinitions1ContainerPort")
              IpProtocol: tcp
              SourceSecurityGroupId: ImportValue("SecurityGroupLoadBalancerApplicationInternal")
              ToPort: get_endvalue("ContainerDefinitions1ContainerPort")
  EC2SecurityGroupIngress:
    - LoadBalancerApplicationHttpExternal:
        IBOX_ENABLED: False
        CidrIp: '0.0.0.0/0'
        GroupId: get_expvalue('SecurityGroupLoadBalancerApplicationExternal', 'LoadBalancerApplicationStack')
        FromPort: get_endvalue('ElasticLoadBalancingV2ListenerECSHttpExternalPort')
        ToPort: get_endvalue('ElasticLoadBalancingV2ListenerECSHttpExternalPort')
    - LoadBalancerApplicationHttpInternal:
        IBOX_ENABLED: False
        CidrIp: '0.0.0.0/0'
        GroupId: get_expvalue('SecurityGroupLoadBalancerApplicationInternal', 'LoadBalancerApplicationStack')
        FromPort: get_endvalue('ElasticLoadBalancingV2ListenerECSHttpInternalPort')
        ToPort: get_endvalue('ElasticLoadBalancingV2ListenerECSHttpInternalPort')
    - LoadBalancerApplicationHttpsExternal:
        IBOX_ENABLED: False
        CidrIp: '0.0.0.0/0'
        GroupId: get_expvalue('SecurityGroupLoadBalancerApplicationExternal', 'LoadBalancerApplicationStack')
        FromPort: get_endvalue('ElasticLoadBalancingV2ListenerECSHttpsExternalPort')
        ToPort: get_endvalue('ElasticLoadBalancingV2ListenerECSHttpsExternalPort')
  ElasticLoadBalancingV2ListenerRule:
    - HttpsExternalRules1:
        IBOX_ENABLED: True
        Condition: LoadBalancerApplicationExternal
    - HttpInternalRules1:
        IBOX_ENABLED: True
        Condition: LoadBalancerApplicationInternal
  ElasticLoadBalancingV2TargetGroup:
    - ECSLoadBalancerApplicationExternal:
        IBOX_ENABLED: True
        IBOX_RESNAME: TargetGroupExternal
        Condition: LoadBalancerApplicationExternal
    - ECSLoadBalancerApplicationInternal:
        IBOX_ENABLED: True
        IBOX_RESNAME: TargetGroupInternal
        Condition: LoadBalancerApplicationInternal
  LaunchType: EC2
  LoadBalancer: ''
  LoadBalancerType: Application
  Route53RecordSet:
    - ECSExternal:
        IBOX_ENABLED: True
        Condition: LoadBalancerApplicationExternalOrInternal
    - ECSInternal:
        IBOX_ENABLED: True
        Condition: LoadBalancerApplicationInternal
  Service:
    - Base:
        IBOX_ENABLED: True

dev: &cfg_dev
  CloudWatchAlarm:
    TargetExternal5XX:
      EvaluationPeriods: 0
    TargetInternal5XX:
      EvaluationPeriods: 0
  ApplicationAutoScalingScalableTargetECSServiceScheduledActions:
    Down:
      Enabled: 'yes'
    Up:
      Enabled: 'yes'

stg: *cfg_dev


IBoxLoaderAfter: !include [
  #ecs-fargate-spot.yml,
]
