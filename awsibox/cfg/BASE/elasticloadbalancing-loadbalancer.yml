Base: &base
  IBOXPARAMETER:
    - LoadBalancerLog:
        Description: 'None to disable - empty for mapped value - for ELBClassic Value is used for EmitInterval too'
  IBOXCONDITION:
    - LoadBalancerLog:
        get_condition('LoadBalancerLog', 'not_equals', 'None', 'LoadBalancerLog')
    - LoadBalancerCookieSticky:
        get_condition('LoadBalancerCookieSticky', 'not_equals', 'None', 'LoadBalancerCookieSticky')
  IBOXOUTPUT:
    - HealthCheck:
        Value:
          get_subvalue(
            'Type=${1M},Target=${2M},Interval=${3M},Timeout=${4M},Healthy=${5M},Unhealthy=${6M}',
            [
              'AutoScalingGroupBaseHealthCheckType',
              'HealthCheckTarget',
              'HealthCheckIntervalSeconds',
              'HealthCheckTimeoutSeconds',
              'HealthyThresholdCount',
              'UnhealthyThresholdCount'])
    - LoadBalancerLog:
        Value: get_endvalue('LoadBalancerLog')
  SecurityGroups:
    - GetAtt('SecurityGroupLoadBalancer', 'GroupId')

External: &external
  <<: *base
  Scheme: 'internet-facing'
  Subnets: Split(',', get_expvalue('SubnetsPublic'))

Internal: &internal
  <<: *base
  Scheme: 'internal'
  Subnets: Split(',', get_expvalue('SubnetsPrivate'))

Classic: &classic
  AccessLoggingPolicy:
    IBOXIF:
      - LoadBalancerLog
      - Ref('AWS::NoValue')
    EmitInterval: get_endvalue('LoadBalancerLog')
    Enabled: True
    S3BucketName: Sub(cfg.BucketLogs)
    S3BucketPrefix: ''
  ConnectionDrainingPolicy:
    Enabled: True
    Timeout: 5
  ConnectionSettings:
    IdleTimeout: 60
  CrossZone: True
  HealthCheck:
    HealthyThreshold: get_endvalue('HealthyThresholdCount')
    Interval: get_endvalue('HealthCheckIntervalSeconds')
    Target: get_endvalue('HealthCheckTarget')
    Timeout: get_endvalue('HealthCheckTimeoutSeconds')
    UnhealthyThreshold: get_endvalue('UnhealthyThresholdCount')
  LBCookieStickinessPolicy:
  # need to do it this "BAD" way cause troposphere/elasticloadbalancing.py classes do not specify class "type" inside list
    If(
      'LoadBalancerCookieSticky',
      [dict([
        ('PolicyName', 'LBCookieStickinessPolicy'),
        ('CookieExpirationPeriod', get_endvalue('LoadBalancerCookieSticky')),
      ])], Ref('AWS::NoValue')
    )

Application: &application
  LoadBalancerAttributes:
    - LogEnabled:
        IBOXIF:
          - LoadBalancerLog
          - 
            Key: access_logs.s3.enabled
            Value: 'false'
        Key: access_logs.s3.enabled
        Value: 'true'
    - LogBucket:
        IBOXIF:
          - LoadBalancerLog
          - Ref('AWS::NoValue')
        Key: access_logs.s3.bucket
        Value: Sub(cfg.BucketLogs)

global:
  ElasticLoadBalancingLoadBalancer:
    - External:
        <<: *classic
        <<: *external
    - Internal:
        <<: *classic
        <<: *internal
  ElasticLoadBalancingV2LoadBalancer:
    - External:
        <<: *application
        <<: *external
    - Internal:
        <<: *application
        <<: *internal
  LoadBalancerLog: None
  LoadBalancerHttp2: True
