IBoxLoader: !include [
  capacity.yml,
  imageid-ec2.yml,
  launchtemplate.yml,
  autoscaling-scalingpolicy.yml,
  autoscaling-scheduledactions.yml,
]


global:
  AutoScalingGroup:
    - Base:
        AvailabilityZones: GetAZs()
        DesiredCapacity: get_endvalue('CapacityDesired')
        MinSize: get_endvalue('CapacityMin')
        CreationPolicy:
          ResourceSignal:
            Count: get_endvalue('CapacityDesired')
            Timeout: PT15M
        HealthCheckGracePeriod: 600
        HealthCheckType: EC2
        LaunchTemplate:
          LaunchTemplateId: Ref('LaunchTemplate')
          Version: GetAtt('LaunchTemplate', 'LatestVersionNumber')
        MaxSize: get_endvalue('CapacityMax')
        MetricsCollection:
          - 0:
              Granularity: 1Minute
        Tags:
          - Name:
              Key: Name
              Value: Ref('EnvRole')
              PropagateAtLaunch: True
          - EnvStackName:
              Key: EnvStackName
              Value: Ref('AWS::StackName')
              PropagateAtLaunch: True
        TerminationPolicies: ['OldestInstance']
        UpdatePolicy:
          AutoScalingReplacingUpdate:
            IBOXIF:
              - WillReplace
              - IBOXIFVALUE
              - Ref('AWS::NoValue')
            WillReplace: True
          AutoScalingRollingUpdate:
            IBOXIF:
              - RollingUpdate
              - IBOXIFVALUE
              - Ref('AWS::NoValue')
            MaxBatchSize: 1
            MinInstancesInService: get_endvalue('CapacityDesired')
            MinSuccessfulInstancesPercent: 100 
            PauseTime: PT20M
            SuspendProcesses:
              - HealthCheck
              - ReplaceUnhealthy
              - AlarmNotification
              - ScheduledActions
            WaitOnResourceSignals: True
          AutoScalingScheduledAction:
            IgnoreUnmodifiedGroupSizeProperties: True
        VPCZoneIdentifier: Split(',', get_expvalue(cfg.VPCZoneIdentifier))
  VPCZoneIdentifier: SubnetsPrivate
