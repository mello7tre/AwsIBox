IBoxLoader: !include
  - base.yml
  - route53/recordset.yml

global:
  Parameter:
    - RecordSetCloudFrontSuffix:
        Description: 'RecordSetCloudFront DNS Name Suffix - empty to disable'
  Condition:
    - RecordSetCloudFront:
        And(
          Condition('CloudFrontDistribution'),
          get_condition('', 'equals', 'yes', 'RecordSetCloudFront')
        )
  Output:
    - RecordSetCloudFront:
        Condition: RecordSetCloudFront
        Value: Sub('${RecordSetCloudFront} --> ${CloudFrontDistribution.DomainName}')
  CloudFrontDistribution:
    - IBOX_BASE:
        IBOX_LINKED_OBJ:
          Route53RecordSet:
            Key: Route53RecordSet
            Conf:
              IBOX_TITLE: RecordSetCloudFront
            Type: CloudFront
        Condition: IBOX_RESNAME.Create
        Create.IBOX_AUTO_PO:
          AllowedValues: ['', 'yes', 'no']
          CONDITION: get_condition('', 'equals', 'yes', f"{IBOX_RESNAME}Create")
        Create: 'no'
        DistributionConfig:
          Aliases:
            - Cdn: If('RecordSetCloudFront',
                Sub('${EnvRole}${RecordSetCloudFrontSuffix}.cdn.%s' % cfg.HostedZoneNameEnv), Ref('RecordSetExternal'))
            - Env:  Sub('${EnvRole}${RecordSetCloudFrontSuffix}.%s' % cfg.HostedZoneNameEnv)
          Comment: Sub('${AWS::StackName}-${EnvRole}')
          DefaultCacheBehavior:
            TargetOriginId: Sub('${EnvRole}${RecordSetCloudFrontSuffix}.origin.%s' % cfg.HostedZoneNameEnv)
          Origins:
            - Default:
                CustomOriginConfig:
                  HTTPSPort: get_endvalue('ListenerLoadBalancerHttpsPort')
                  HTTPPort:  get_endvalue('ListenerLoadBalancerHttpPort')
                DomainName: get_endvalue('CloudFrontDistributionBaseDistributionConfigDefaultCacheBehaviorTargetOriginId')
                Id: get_endvalue('CloudFrontDistributionBaseDistributionConfigDefaultCacheBehaviorTargetOriginId')
  RecordSetCloudFront: 'yes'


IBoxLoaderAfter: !include [
  #origin-adhoc.yml,
]
