global:
  CloudFrontDistribution:
    - IBOX_BASE:
        IBOX_TITLE: CloudFrontDistribution
        AcmCertificate.IBOX_PCO:
          IBOX_CONDITION:
            - _AcmCertificate:
                get_condition('', 'equals', 'yes', f'{IBOX_RESNAME}AcmCertificate')
        AcmCertificate: 'yes'
        DistributionConfig:
          Aliases.IBOX_CUSTOM_OBJ:
            Value: get_endvalue(f"CloudFrontDistributionBaseDistributionConfigAliases{IBOX_RESNAME}")
          CacheBehaviors:
            - IBOX_BASE: &cache_behavior
                Compress: True
                ForwardedValues:
                  QueryString: True
                  Headers: []
                ViewerProtocolPolicy: redirect-to-https
          CustomErrorResponses: []
          DefaultCacheBehavior: *cache_behavior
          Enabled: true
          HttpVersion: http2
          Logging:
            IBOX_IF:
              - _LogEnabled
              - IBOX_IFVALUE
              - Ref('AWS::NoValue')
            Bucket: Sub(f'{cfg.BucketNameLogs}.s3.amazonaws.com')
            Prefix: Sub('${EnvRole}.${AWS::StackName}/')
          Origins:
            - IBOX_BASE:
                IBOX_PARAMETER:
                  - IBOX_REFNAME.DomainName:
                      Description: 'empty for mapped value'
                CustomOriginConfig:
                  IBOX_PARAMETER:
                    - IBOX_REFNAME.CustomOriginConfigHTTPSPort:
                        Description: 'empty for mapped value'
                  OriginProtocolPolicy: https-only
                OriginPath: ''
                S3OriginConfig:
                  IBOX_PARAMETER:
                    - IBOX_REFNAME.S3OriginConfigOriginAccessIdentity:
                        Description: 'empty for mapped value'
          PriceClass: PriceClass_100
          ViewerCertificate:
            AcmCertificateArn: If(f'{IBOX_RESNAME}AcmCertificate', get_endvalue('GlobalCertificateArn'), Ref('AWS::NoValue'))
            CloudFrontDefaultCertificate: If(f'{IBOX_RESNAME}AcmCertificate', Ref('AWS::NoValue'), True)
            SslSupportMethod: If(f'{IBOX_RESNAME}AcmCertificate', 'sni-only', Ref('AWS::NoValue'))
            MinimumProtocolVersion: If(f'{IBOX_RESNAME}AcmCertificate', get_endvalue('CloudFrontMinimumProtocolVersion'), Ref('AWS::NoValue'))
          WebACLId: get_endvalue('CloudFrontWebACLId', condition=True)
        LogEnabled.IBOX_PCO:
          IBOX_PARAMETER:
            - _LogEnabled:
                Description: 'Empty for mapped value'
                AllowedValues: ['', 'yes', 'no']
          IBOX_CONDITION:
            - _LogEnabled:
                get_condition('', 'equals', 'yes', f'{IBOX_RESNAME}LogEnabled')
        LogEnabled: 'no'
