Base: &base
  IBOX_CONDITION:
    - LoadBalancerCookieSticky:
        get_condition('', 'not_equals', '0', 'LoadBalancerCookieSticky')
  IBOX_OUTPUT:
    - HealthCheck:
        Value:
          get_subvalue(
            'Type=${1M},Target=${2M},Interval=${3M},Timeout=${4M},Healthy=${5M},Unhealthy=${6M}',
            [
              'AutoScalingGroupBaseHealthCheckType',
              'HealthCheckTarget',
              'HealthCheckIntervalSeconds',
              'HealthCheckTimeoutSeconds',
              'HealthyThresholdCount',
              'UnhealthyThresholdCount'])
  AccessLoggingPolicy:
    IBOX_IF:
      - LoadBalancerLog
      - IBOX_IFVALUE
      - Ref('AWS::NoValue')
    EmitInterval: get_endvalue('LoadBalancerLog')
    Enabled: true
    S3BucketName: Sub(cfg.BucketNameLogs)
    S3BucketPrefix: ''
  ConnectionDrainingPolicy:
    Enabled: true
    Timeout: 5
  ConnectionSettings:
    IdleTimeout: 60
  CrossZone: true
  HealthCheck:
    HealthyThreshold: get_endvalue('HealthyThresholdCount')
    Interval: get_endvalue('HealthCheckIntervalSeconds')
    Target: get_endvalue('HealthCheckTarget')
    Timeout: get_endvalue('HealthCheckTimeoutSeconds')
    UnhealthyThreshold: get_endvalue('UnhealthyThresholdCount')
  LBCookieStickinessPolicy:
  # need to do it this "BAD" way cause troposphere/elasticloadbalancing.py classes do not specify class "type" inside list
    If(
      'LoadBalancerCookieSticky',
      [dict([
        ('PolicyName', 'LBCookieStickinessPolicy'),
        ('CookieExpirationPeriod', get_endvalue('LoadBalancerCookieSticky')),
      ])], Ref('AWS::NoValue')
    )
  SecurityGroups:
    - GetAtt('SecurityGroupLoadBalancer', 'GroupId')


global:
  ElasticLoadBalancingLoadBalancer:
    - External:
        <<: *base
        Scheme: 'internet-facing'
        Subnets: Split(',', get_expvalue('SubnetsPublic'))
    - Internal:
        <<: *base
        Scheme: 'internal'
        Subnets: Split(',', get_expvalue('SubnetsPrivate'))
