Base: &base
  IBOX_PARAMETER:
    - LoadBalancerHttp2:
        Description: 'empty for mapped value'
        AllowedValues: ['', 'true', 'false']
  IBOX_CONDITION:
    - LoadBalancerHttp2:
        get_condition('', 'not_equals', 'None', 'LoadBalancerHttp2')
  LoadBalancerAttributes:
    - LogEnabled:
        IBOX_IF:
          - LoadBalancerLog
          - IBOX_IFVALUE
          - 
            Key: access_logs.s3.enabled
            Value: 'false'
        Key: access_logs.s3.enabled
        Value: 'true'
    - LogBucket:
        IBOX_IF:
          - LoadBalancerLog
          - IBOX_IFVALUE
          - Ref('AWS::NoValue')
        Key: access_logs.s3.bucket
        Value: Sub(cfg.BucketLogs)
    - LogPrefix:
        IBOX_IF:
          - LoadBalancerLog
          - IBOX_IFVALUE
          - Ref('AWS::NoValue')
        Key: access_logs.s3.prefix
        Value: Sub('${EnvRole}.${AWS::StackName}')
    - Http2:
        IBOX_IF:
          - LoadBalancerHttp2
          - IBOX_IFVALUE
          - Ref('AWS::NoValue')
        Key: routing.http2.enabled
        Value: get_endvalue('LoadBalancerHttp2')
  SecurityGroups:
    - GetAtt('SecurityGroupLoadBalancer', 'GroupId')

ALB: &alb
  <<: *base
  IBOX_OUTPUT:
    - IBOXRESNAME:
        Condition: IBOXRESNAME
        Value: Ref(IBOXRESNAME)
        Export: Export(Sub('%s-${AWS::StackName}' % IBOXRESNAME))
    - IBOXRESNAMEDNS:
        Condition: IBOXRESNAME
        Value: GetAtt(IBOXRESNAME, 'DNSName')
        Export: Export(Sub('%sDNS-${AWS::StackName}' % IBOXRESNAME))
    - IBOXRESNAMEFullName:
        Condition: IBOXRESNAME
        Value: GetAtt(IBOXRESNAME, 'LoadBalancerFullName')
        Export: Export(Sub('%sFullName-${AWS::StackName}' % IBOXRESNAME))
  Condition: IBOXRESNAME
  SecurityGroups:
    - get_expvalue(f'SecurityGroup{IBOXRESNAME}')
    - GetAtt(f'SecurityGroup{IBOXRESNAME}', 'GroupId')


global:
  ElasticLoadBalancingV2LoadBalancer:
    - External: &external
        <<: *base
        Scheme: 'internet-facing'
        Subnets: Split(',', get_expvalue('SubnetsPublic'))
    - Internal: &internal
        <<: *base
        Scheme: 'internal'
        Subnets: Split(',', get_expvalue('SubnetsPrivate'))
  ElasticLoadBalancingV2LoadBalancerALB:
    - External:
        <<: *external
        <<: *alb
    - Internal:
        <<: *internal
        <<: *alb
