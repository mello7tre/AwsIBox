global:
  ElasticLoadBalancingLoadBalancer:
    - IBOX_BASE:
        IBOX_CONDITION:
          - LoadBalancerCookieSticky:
              get_condition('', 'not_equals', '0', 'LoadBalancerCookieSticky')
        IBOX_OUTPUT:
          - HealthCheck:
              Value:
                get_subvalue(
                  'Type=${1M},Target=${2M},Interval=${3M},Timeout=${4M},Healthy=${5M},Unhealthy=${6M}',
                  [
                    'AutoScalingGroupBaseHealthCheckType',
                    f'{IBOX_MAPNAME}HealthCheckTarget',
                    f'{IBOX_MAPNAME}HealthCheckInterval',
                    f'{IBOX_MAPNAME}HealthCheckTimeout',
                    f'{IBOX_MAPNAME}HealthCheckHealthyThreshold',
                    f'{IBOX_MAPNAME}HealthCheckUnhealthyThreshold'])
        AccessLoggingPolicy:
          IBOX_IF:
            - LoadBalancerLog
            - IBOX_IFVALUE
            - Ref('AWS::NoValue')
          EmitInterval: get_endvalue('LoadBalancerLog')
          Enabled: true
          S3BucketName: Sub(cfg.BucketNameLogs)
          S3BucketPrefix: ''
        ConnectionDrainingPolicy:
          Enabled: true
          Timeout: 5
        ConnectionSettings:
          IdleTimeout: 60
        CrossZone: true
        HealthCheck:
          HealthyThreshold: 2
          Interval: 30
          Timeout: 6
          UnhealthyThreshold: 3
        LBCookieStickinessPolicy:
        # need to do it this "BAD" way cause troposphere/elasticloadbalancing.py classes do not specify class "type" inside list
          If(
            'LoadBalancerCookieSticky',
            [dict([
              ('PolicyName', 'LBCookieStickinessPolicy'),
              ('CookieExpirationPeriod', get_endvalue('LoadBalancerCookieSticky')),
            ])], Ref('AWS::NoValue')
          )
        SecurityGroups:
          - GetAtt('SecurityGroupLoadBalancer', 'GroupId')
    - External:
        Scheme: 'internet-facing'
        Subnets: Split(',', get_expvalue('SubnetsPublic'))
    - Internal:
        Scheme: 'internal'
        Subnets: Split(',', get_expvalue('SubnetsPrivate'))
