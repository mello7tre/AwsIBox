IBoxLoader: !include
  - com/ecs/task.yml

global:
  Parameter:
    - ECSRunTaskClusterStackName:
        Description: "Empty for mapped value"
  Condition:
    - EnableExecuteCommand: Equals(True, False)
      # Need to create a "dummy" Condition for tasks that do not use EventsRuleECSRunTask, where there is the "right" one
    - ECSTasksLaunchOnFargate: Equals(True, True)
  Output:
    - ECSRunTaskClusterName:
        Value: get_expvalue('Cluster', 'ECSRunTaskClusterStackName')
    - ECSRunTaskClusterStackName:
        Value: get_endvalue("ECSRunTaskClusterStackName")
    - ECSRunTaskSubnetsPrivate:
        Value: ImportValue("SubnetsPrivate")
    - ECSRunTaskSecurityGroups:
        IBOX_ENABLED_IF: "cfg.SchedulerSchedule['ECSRunTask']['IBOX_ENABLED'] == False"
        Names.IBOX_PCO:
          IBOX_PARAMETER:
            - IBOX_MAPNAME.Names:
                Description: ECSRunTask SecurityGroups comma delimited list - empty for default based on env/role
                Default: cfg.SECURITY_GROUPS_DEFAULT
                Type: CommaDelimitedList
          IBOX_OUTPUT:
            - IBOX_INDEXNAME.Names:
                Value: Join(",", get_endvalue(f"{IBOX_MAPNAME}Names"))
        Names.IBOX_CUSTOM_OBJ:
          IBOX_CONDITION:
            - IBOX_MAPNAME.IBOX_CUSTOM_OBJ_INDEX:
                Not(get_condition("", "equals", "none", Select(IBOX_CUSTOM_OBJ_INDEX, IBOX_MAPNAME)))
          Value: >-
            If(
              f"{IBOX_MAPNAME}{IBOX_CUSTOM_OBJ_INDEX}",
              get_expvalue(
                Select(IBOX_CUSTOM_OBJ_INDEX, get_endvalue(IBOX_MAPNAME)),
                prefix="SecurityGroup"),
              Ref("AWS::NoValue"))
        Names+*:
          - none
          - none
          - none
          - none
        Value: Join(",", IBOX_CUSTOM_OBJ_RESULT)
  ECSRunTaskClusterStackName: ecs-a
  ECSTaskDefinition:
    - Base:
        NetworkMode: awsvpc
  IAMPolicy:
    - LambdaECSRunTaskTrigger:
        PolicyName: Sub('LambdaECSRunTaskTrigger_${AWS::StackName}')
        Roles:
          - ImportValue('RoleLambdaECSRunTask')
        PolicyDocument:
          Statement:
            - 1:
                Action:
                  - 'ecs:RunTask'
                  - 'ecs:StartTask'
                Effect: Allow
                Resource: Ref('TaskDefinition')
            - 2:
                Action:
                  - 'iam:GetRole'
                  - 'iam:PassRole'
                Effect: Allow
                Resource: 
                  - GetAtt('RoleTask', 'Arn')
                  - ImportValue('RoleECSTaskExecution')
  SchedulerSchedule:
    - ECSRunTask:
        IBOX_ENABLED: False
        IBOX_SOURCE_OBJ: SchedulerScheduleTargetECSCluster
        Description: 'Periodically run task on ECS Cluster'
        FlexibleTimeWindow:
          Mode: "OFF"
        ClusterStackName: get_endvalue("ECSRunTaskClusterStackName")
        ScheduleExpressionTimezone: Europe/Rome
        State: 'DISABLED'
        Target:
          EcsParameters:
            LaunchType.IBOX_PCO:
              IBOX_PARAMETER:
                - IBOX_CURNAME:
                    Description: Empty for mapped value
                    AllowedValues: ['', 'EC2', 'FARGATE']
              IBOX_CONDITION:
                - ECSTasksLaunchOnFargate:
                    get_condition('', 'equals', 'FARGATE', IBOX_CURNAME)
              IBOX_OUTPUT:
                - IBOX_CURNAME:
                    Value: get_endvalue(IBOX_CURNAME)
            LaunchType: FARGATE
