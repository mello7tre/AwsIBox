IBoxLoader: !include
  - res/ec2/subnets.yml
  - res/ec2/subnet-routetable-associations.yml

global:
  StackName: vpc
  Parameter:
    - VPCCidrBlock:
        Description: 'CIDR Block for VPC'
        Default: cfg.VPC_DEFAULT_CIDR_BLOCK
    - VPCName:
        Description: 'VPC Tag Name'
  Output:
    - VpcId:
        Value: Ref('VPC')
        Export: Export('VpcId')
    - VPCCidr:
        Value: GetAtt('VPC', 'CidrBlock')
        Export: Export('VPCCidr')
    - RouteTablePrivate:
        Value: Ref('RouteTablePrivate')
        Export: Export('RouteTablePrivate')
  Mapping:
    - IBoxAZ:
  EC2EIP:
    - Nat:
        Condition: EC2NatGatewayBase
        IBOX_RESNAME: EIPNat
        IBOX_OUTPUT:
          - _:
              Value: Ref(IBOX_RESNAME)
        Domain: vpc
  EC2NatGateway:
    - Base:
        IBOX_TITLE: NatGateway
        Create: 'no'
        DependsOn: VPCGatewayAttachment
        AllocationId: GetAtt("EIPNat", "AllocationId")
        SubnetId: Ref("SubnetPublicA")
  EC2InternetGateway:
    - Base:
        IBOX_TITLE: InternetGateway
        Tags: Tags(Name=Ref("VPCName"))
  EC2Route:
    - InternetGateway:
        IBOX_TITLE: RouteInternetGateway
        DependsOn: VPCGatewayAttachment
        DestinationCidrBlock: "0.0.0.0/0"
        GatewayId: Ref("InternetGateway")
        RouteTableId: Ref("RouteTablePublic")
    - NatGateway:
        Condition: EC2NatGatewayBase
        IBOX_TITLE: RouteNatGateway
        DestinationCidrBlock: "0.0.0.0/0"
        NatGatewayId: Ref("NatGateway")
        RouteTableId: Ref("RouteTablePrivate")
  EC2RouteTable:
    - Private:
        IBOX_TITLE: RouteTable.IBOX_INDEXNAME
        Tags: Tags(Name=Sub("${VPCName}-%s" % IBOX_INDEXNAME))
        VpcId: Ref("VPC")
    - Public:
        IBOX_TITLE: RouteTable.IBOX_INDEXNAME
        Tags: Tags(Name=Sub("${VPCName}-%s" % IBOX_INDEXNAME))
        VpcId: Ref("VPC")
  EC2VPC:
    - Base:
        IBOX_TITLE: VPC
        IBOX_LINKED_OBJ:
          SubnetPrivate:
            Key: EC2Subnet
            Name: EC2SubnetPrivate
            Type: Private
            For: range(cfg.AZones["MAX"])
            Conf:
              IBOX_LINKED_OBJ_NAME: cfg.AZoneNames[IBOX_LINKED_OBJ_FOR]
              IBOX_LINKED_OBJ_INDEX: IBOX_LINKED_OBJ_FOR
          SubnetPublic:
            Key: EC2Subnet
            Name: EC2SubnetPublic
            Type: Public
            For: range(cfg.AZones["MAX"])
            Conf:
              IBOX_LINKED_OBJ_NAME: cfg.AZoneNames[IBOX_LINKED_OBJ_FOR]
              IBOX_LINKED_OBJ_INDEX: IBOX_LINKED_OBJ_FOR
          SubnetRouteTableAssociationPrivate:
            Key: EC2SubnetRouteTableAssociation
            Name: EC2SubnetRouteTableAssociationPrivate
            Type: Private
            For: range(cfg.AZones["MAX"])
            Conf:
              IBOX_LINKED_OBJ_NAME: cfg.AZoneNames[IBOX_LINKED_OBJ_FOR]
          SubnetRouteTableAssociationPublic:
            Key: EC2SubnetRouteTableAssociation
            Name: EC2SubnetRouteTableAssociationPublic
            Type: Public
            For: range(cfg.AZones["MAX"])
            Conf:
              IBOX_LINKED_OBJ_NAME: cfg.AZoneNames[IBOX_LINKED_OBJ_FOR]
        IBOX_OUTPUT:
          - SubnetsPrivate:
              Export: Export("SubnetsPrivate")
              Value: >-
                Join(",",
                  [If(f"Zone{cfg.AZoneNames[z]}", Ref(f"SubnetPrivate{cfg.AZoneNames[z]}"), Ref("AWS::NoValue"))
                  for z in range(cfg.AZones["MAX"])])
          - SubnetsPublic:
              Export: Export("SubnetsPublic")
              Value: >-
                Join(",",
                  [If(f"Zone{cfg.AZoneNames[z]}", Ref(f"SubnetPublic{cfg.AZoneNames[z]}"), Ref("AWS::NoValue"))
                  for z in range(cfg.AZones["MAX"])])
        CidrBlock: Ref('VPCCidrBlock')
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags: Tags(Name=Ref('VPCName'))
  EC2VPCGatewayAttachment:
    - Base:
        IBOX_TITLE: VPCGatewayAttachment
        InternetGatewayId:  Ref("InternetGateway")
        VpcId: Ref("VPC")
