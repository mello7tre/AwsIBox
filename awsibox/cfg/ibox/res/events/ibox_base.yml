global:
  EventsRule:
    - IBOX_BASE:
        Name: Sub("${AWS::StackName}-${EnvRole}-" f"Rule{IBOX_INDEXNAME}")
        ScheduleExpression.IBOX_AUTO_PO:
          Description: "Events Rule Schedule - empty for default based on mapping"
        State.IBOX_AUTO_PO:
          Description: "Events Rule State - empty for default based on mappings"
          AllowedValues: ["", "DISABLED", "ENABLED"]
    - TargetLambda:
        IBOX_BASE_SKIP: True
        IBOX_ENABLED: False
        IBOX_LINKED_OBJ:
          Lambda:
            Key: LambdaPermission
            Type: EventsRule
            Name: LambdaPermission.IBOX_INDEXNAME.IBOX_RESNAME
            Conf:
              IBOX_RESNAME: LambdaPermission.IBOX_INDEXNAME.IBOX_RESNAME
              IBOX_LINKED_OBJ_NAME: getattr(cfg, f"{IBOX_RESNAME}TargetsLambda0Arn")
              IBOX_LINKED_OBJ_INDEX: GetAtt("IBOX_RESNAME", 'Arn')
    - TargetECSCluster:
        IBOX_BASE_SKIP: True
        IBOX_ENABLED: False
        ClusterStackName.IBOX_AUTO_PO: {}
        Targets:
          - ECSCluster0:
              Arn: >-
                get_subvalue(
                  "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${1E}", "Cluster", stack=f"{IBOX_RESNAME}ClusterStackName")
              EcsParameters:
                LaunchType: get_endvalue("ServiceBaseLaunchType")
                NetworkConfiguration:
                  IBOX_IF:
                    - ECSTaskDefinitionBaseNetworkModeAwsVpc
                    - IBOX_IFVALUE
                    - Ref("AWS::NoValue")
                  AwsVpcConfiguration:
                    SecurityGroups: cfg.SecurityGroupsImport
                    Subnets: Split(",", ImportValue("SubnetsPrivate"))
                TaskDefinitionArn: Ref("TaskDefinition")
              RoleArn: ImportValue("RoleECSEvents")
              Id: str(f"TargetECSCluster0")
