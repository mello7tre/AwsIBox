global:
  SchedulerSchedule:
    - IBOX_BASE:
        Description: "Events Rule Schedule - empty for default based on mapping"
        ScheduleExpression.IBOX_AUTO_PO: {}
        State.IBOX_AUTO_PO: {}
        Target:
          RoleArn: ImportValue("RoleSchedulerExecution")
    - TargetLambda:
        IBOX_BASE_SKIP: True
        IBOX_ENABLED: False
        IBOX_LINKED_OBJ:
          Lambda:
            Key: LambdaPermission
            Type: SchedulerSchedule
            Name: LambdaPermission.IBOX_RESNAME
            Conf:
              IBOX_RESNAME: LambdaPermission.IBOX_RESNAME
              IBOX_LINKED_OBJ_NAME: getattr(cfg, f"{IBOX_RESNAME}TargetArn")
              IBOX_LINKED_OBJ_INDEX: GetAtt("IBOX_RESNAME", 'Arn')
    - TargetECSCluster:
        IBOX_BASE_SKIP: True
        IBOX_ENABLED: False
        ClusterStackName.IBOX_AUTO_PO: {}
        Target:
          Arn: >-
            get_subvalue(
              "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${1E}", "Cluster", stack=f"{IBOX_RESNAME}ClusterStackName")
          EcsParameters:
            LaunchType: get_endvalue("ServiceBaseLaunchType")
            NetworkConfiguration:
              IBOX_IF:
                - ECSTaskDefinitionBaseNetworkModeAwsVpc
                - IBOX_IFVALUE
                - Ref("AWS::NoValue")
              AwsvpcConfiguration:
                SecurityGroups.IBOX_AUTO_PO:
                  Description: Scheduler Target EcsParameters SecurityGroups comma delimited list - empty for default based on env/role
                  Type: CommaDelimitedList
                  Default: cfg.SECURITY_GROUPS_DEFAULT
                  Value: ${SecurityGroups}
                SecurityGroups.IBOX_PCO:
                  IBOX_OUTPUT:
                    - IBOX_CURNAME.Names:
                        Value: get_endvalue(IBOX_CURNAME, nolist=True)
                SecurityGroups.IBOX_CUSTOM_OBJ:
                  IBOX_CONDITION:
                    - IBOX_MAPNAME.IBOX_CUSTOM_OBJ_INDEX:
                        Not(get_condition("", "equals", "none", Select(IBOX_CUSTOM_OBJ_INDEX, IBOX_MAPNAME)))
                  Value: >-
                    If(
                      f"{IBOX_MAPNAME}{IBOX_CUSTOM_OBJ_INDEX}",
                      get_expvalue(
                        Select(IBOX_CUSTOM_OBJ_INDEX, get_endvalue(IBOX_MAPNAME)),
                        prefix="SecurityGroup"),
                      Ref("AWS::NoValue"))
                SecurityGroups:
                  - none
                  - none
                  - none
                  - none
                Subnets: Split(",", ImportValue("SubnetsPrivate"))
            TaskDefinitionArn: Ref("TaskDefinition")
          RoleArn: ImportValue("RoleECSEvents")
