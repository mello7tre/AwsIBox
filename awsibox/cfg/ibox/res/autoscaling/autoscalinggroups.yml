IBoxLoader: !include
  - com/autoscaling/capacity.yml
  #- com/autoscaling/imageid-ec2.yml
  - res/autoscaling/launchtemplates.yml

global:
  AutoScalingGroup:
    - Base:
        IBOX_TITLE: AutoScalingGroup
        AvailabilityZones: GetAZs()
        DesiredCapacity: get_endvalue('CapacityDesired')
        MinSize: get_endvalue('CapacityMin')
        CreationPolicy:
          ResourceSignal:
            Count: get_endvalue('CapacityDesired')
            Timeout: PT15M
        HealthCheckGracePeriod: 600
        HealthCheckType.IBOX_AUTO_PO: {}
        HealthCheckType: EC2
        InstanceMaintenancePolicyEnabled: 'no'
        InstanceMaintenancePolicy.IBOX_PCO:
          IBOX_PARAMETER:
            - IBOX_CURNAME.Enabled:
                Description: Empty for mapped value
                AllowedValues: ['', 'yes', 'no']
          IBOX_CONDITION:
            - IBOX_CURNAME.Enabled:
                 get_condition('', 'equals', 'yes', f'{IBOX_CURNAME}Enabled')
          IBOX_OUTPUT:
            - IBOX_CURNAME.Enabled:
                Value: get_endvalue(f'{IBOX_CURNAME}Enabled')
        InstanceMaintenancePolicy:
          IBOX_IF:
            - IBOX_CURNAME.Enabled
            - IBOX_IFVALUE
            - Ref('AWS::NoValue')
          MaxHealthyPercentage.IBOX_AUTO_PO:
            Condition: IBOX_CURMAP.Enabled
            Description: Empty for mapped value, range 100-200 (Max - Min <= 100)
          MaxHealthyPercentage: 200
          MinHealthyPercentage.IBOX_AUTO_PO:
            Condition: IBOX_CURMAP.Enabled
            Description: Empty for mapped value, range 0-100 (Max - Min <= 100)
          MinHealthyPercentage: 100
        LaunchTemplate:
          LaunchTemplateId: Ref('LaunchTemplate')
          Version: GetAtt('LaunchTemplate', 'LatestVersionNumber')
        MaxInstanceLifetime.IBOX_AUTO_PO:
          Description: 'Empty for mapped value - 0 to disable'
          CONDITION: get_condition('', 'not_equals', '0', IBOX_CURNAME)
          Value: ${MaxInstanceLifetime}
        MaxInstanceLifetime.IBOX_CODE: If(IBOX_CURNAME, get_endvalue(IBOX_CURNAME), Ref('AWS::NoValue'))
        MaxInstanceLifetime: 0
        MaxSize: get_endvalue('CapacityMax')
        MetricsCollection:
          - 0:
              Granularity: 1Minute
        Tags:
          - Name:
              Key: Name
              Value: Ref('EnvRole')
              PropagateAtLaunch: true
          - EnvStackName:
              Key: EnvStackName
              Value: Ref('AWS::StackName')
              PropagateAtLaunch: true
        TerminationPolicies:
          - OldestInstance
        UpdatePolicy:
          AutoScalingReplacingUpdate:
            IBOX_IF:
              - WillReplace
              - IBOX_IFVALUE
              - Ref('AWS::NoValue')
            WillReplace: true
          AutoScalingRollingUpdate:
            IBOX_IF:
              - RollingUpdate
              - IBOX_IFVALUE
              - Ref('AWS::NoValue')
            MaxBatchSize: 1
            MinInstancesInService: get_endvalue('CapacityDesired')
            MinSuccessfulInstancesPercent: 100 
            PauseTime: PT20M
            SuspendProcesses:
              - HealthCheck
              - ReplaceUnhealthy
              - AlarmNotification
              - ScheduledActions
            WaitOnResourceSignals: true
          AutoScalingScheduledAction:
            IgnoreUnmodifiedGroupSizeProperties: true
        VPCZoneIdentifier: Split(',', ImportValue('SubnetsPrivate'))
