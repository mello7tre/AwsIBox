global:
  EFSFileSystem:
    - IBOX_BASE:
        IBOX_CONDITION:
          - _:
              get_condition("", "equals", "yes", f"{IBOX_RESNAME}Enabled")
        IBOX_OUTPUT:
          - _:
              Condition: IBOX_RESNAME
              Value: Ref(IBOX_RESNAME)
              Export: Export(IBOX_RESNAME)
        IBOX_LINKED_OBJ:
          RecordSet:
            Key: Route53RecordSet
            Type: EFS
            Conf:
              IBOX_RESNAME: RecordSetEFS.IBOX_INDEXNAME
              IBOX_LINKED_OBJ_NAME: IBOX_RESNAME
              IBOX_LINKED_OBJ_INDEX: IBOX_INDEXNAME
          SecurityGroup:
            Key: EC2SecurityGroup
            Type: EFS
            For: ["Client", "Server"]
            Conf:
              IBOX_LINKED_OBJ_NAME: IBOX_RESNAME
              IBOX_LINKED_OBJ_INDEX: IBOX_INDEXNAME
          SecurityGroupIngress:
            Key: EC2SecurityGroupIngress
            Type: EFS
            Conf:
              IBOX_LINKED_OBJ_NAME: IBOX_RESNAME
              IBOX_LINKED_OBJ_INDEX: IBOX_INDEXNAME
          MountTarget:
            Key: EFSMountTarget
            Type: Base
            For: range(cfg.AZones["MAX"])
            Conf:
              IBOX_LINKED_OBJ_NAME: IBOX_RESNAME
              IBOX_LINKED_OBJ_INDEX: IBOX_LINKED_OBJ_FOR
        Condition: IBOX_RESNAME
        Enabled: 'no'
        Encrypted: false
        PerformanceMode: generalPurpose

  EFSMountTarget:
    - Base:
        IBOX_ENABLED: False
        IBOX_CONDITION:
          - _:
              And(
                Condition(IBOX_LINKED_OBJ_NAME),
                Equals(FindInMap("AvabilityZones", Ref("AWS::Region"), f"Zone{IBOX_LINKED_OBJ_INDEX}"), "True"),
              )
        Condition: IBOX_RESNAME
        FileSystemId: Ref(IBOX_LINKED_OBJ_NAME)
        SecurityGroups:
          - Ref(f"SecurityGroup{IBOX_LINKED_OBJ_NAME}Server")
        SubnetId: Select(str(IBOX_LINKED_OBJ_INDEX), Split(",", ImportValue("SubnetsPrivate")))
