global:
  ECSTaskDefinition:
    - IBOX_BASE:
        IBOX_ENABLED: False
        # Need to define Parameters, Conditions and Outputs here because they need to be used/evaluated also in ContainerDefinitions
        # and ContainerDefinitions is processed before ECSTaskDefinition keys Cpu, Memory and NetworkMode (alphabetical order).
        IBOX_PARAMETER:
          - _Memory:
              Description: Empty for mapped value
          - _Cpu:
              AllowedValues: [
                '', 'none', '128', '256', '384', '512', '640', '768', '896', '1024',
                '1152', '1280', '1408', '1536', '1664', '1792', '1920', '2048',
                '2176', '2304', '2432', '2560', '2688', '2816', '2944', '3072',
                '3200', '3328', '3456', '3584', '3712', '3840', '3968', '4096',
              ]
              Description: Empty for mapped value
          - _NetworkMode:
              AllowedValues: ['', 'awsvpc', 'bridge']
              Description: Empty for mapped value
        IBOX_CONDITION:
          - _Cpu:
              get_condition('', 'not_equals', 'none', f"{IBOX_RESNAME}Cpu")
          - _Memory:
              get_condition('', 'not_equals', 'none', f"{IBOX_RESNAME}Memory")
          - _NetworkModeAwsVpc:
              get_condition('', 'equals', 'awsvpc', f"{IBOX_RESNAME}NetworkMode", OrExtend=[Condition('ECSTasksLaunchOnFargate')])
          - _NetworkModeStandard:
              get_condition('', 'not_equals', 'awsvpc', f"{IBOX_RESNAME}NetworkMode")
          - _UseOneContainer:
              Equals(1, len(getattr(cfg, f"{IBOX_RESNAME}ContainerDefinitions")))
        IBOX_OUTPUT:
          - _Cpu:
              Value: ${Cpu}
          - _Memory:
              Value: ${Memory}
          - _NetworkMode:
              Value: ${NetworkMode}
        IBOX_TITLE: TaskDefinition
        ContainerDefinitions:
          - IBOX_BASE:
              IBOX_PARAMETER:
                - EnvApp.IBOX_PROPNAME.Version:
                    IBOX_ENABLED_IF: hasattr(cfg, f"{IBOX_REFNAME}ImageSuffix")
                    Description: str(f'EnvApp{IBOX_PROPNAME}Version')
                    Default: "1"
                    AllowedPattern: '^[a-zA-Z0-9-_.]+$'
                - IBOX_REFNAME.Cpu:
                    Description: 'Cpu Share - empty for mapped value'
                - IBOX_REFNAME.Memory:
                    Description: 'Memory hard limit - empty for mapped value'
                - IBOX_REFNAME.Command:
                    Description: 'Command to execute'
                    Type: 'CommaDelimitedList'
              IBOX_CONDITION:
                - IBOX_REFNAME.Command: Or(
                    Condition(f'{IBOX_REFNAME}CommandOverride'),
                    Equals('yes', 'yes' if isinstance(getattr(cfg, f'{IBOX_REFNAME}Command'), list) else 'no'))
                - IBOX_REFNAME.HostPort:
                    get_condition('', 'not_equals', 'none', f'{IBOX_REFNAME}HostPort')
                - IBOX_REFNAME.UseTaskDefinitionCpu:
                    And(
                      Condition(f"{IBOX_RESNAME}UseOneContainer"),
                      Condition(f"{IBOX_RESNAME}Cpu"),
                      get_condition("", "equals", "yes", f"{IBOX_REFNAME}UseTaskDefinitionCpu")
                    )
                - IBOX_REFNAME.UseTaskDefinitionMemory:
                    And(
                      Condition(f"{IBOX_RESNAME}UseOneContainer"),
                      Condition(f"{IBOX_RESNAME}Memory"),
                      get_condition("", "equals", "yes", f"{IBOX_REFNAME}UseTaskDefinitionMemory")
                    )
              IBOX_OUTPUT:
                - EnvApp.IBOX_PROPNAME.Version:
                    IBOX_ENABLED_IF: hasattr(cfg, f"{IBOX_REFNAME}ImageSuffix")
                    Value: Ref(f'EnvApp{IBOX_PROPNAME}Version')
                - IBOX_REFNAME.Command:
                    Condition: IBOX_REFNAME.Command
                    Value: Join(',', get_endvalue(f'{IBOX_REFNAME}Command')) 
                - IBOX_REFNAME.Constraints:
                    Value: >-
                      Cpu= ${Cpu} ,Memory= ${Memory} If(f"{IBOX_MAPNAME}MemoryReservation",",MemoryReservation=",Ref("AWS::NoValue")) ${MemoryReservation}
                - IBOX_REFNAME.Image:
                    Value: ${Image}
              Command: Ref('AWS::NoValue')
              ContainerPort.IBOX_AUTO_PO:
                CONDITION: get_condition('', 'not_equals', 0, f'{IBOX_REFNAME}ContainerPort')
              ContainerPort: 0
              Cpu.IBOX_CODE: If(
                f"{IBOX_REFNAME}UseTaskDefinitionCpu", get_endvalue(f"{IBOX_RESNAME}Cpu"), get_endvalue(IBOX_CURNAME))
              Cpu: 16
              DockerLabels: 
                LastUpdate: Ref('DockerLabelLastUpdate')
              Environment:
                - Env:
                    Name: Env
                    Value: Ref('Env')
                - EnvAbbr:
                    Name: EnvAbbr
                    Value: Ref('EnvShort')
                - EnvRole:
                    Name: EnvRole
                    Value: Ref('EnvRole')
                - EnvStackName:
                    Name: EnvStackName
                    Value: Ref('AWS::StackName')
                - EnvRegion:
                    Name: EnvRegion
                    Value: Ref('AWS::Region')
                - EnvBrand:
                    Name: EnvBrand
                    Value: cfg.BrandDomain
                - EnvClusterStackName:
                    Name: EnvClusterStackName
                    Value: get_endvalue('ClusterStack')
              Essential: true
              HostPort: none
              Image: Join('', [
                  get_endvalue('EcrAccount'), '.dkr.ecr.', Ref('AWS::Region'), '.amazonaws.com/',
                  Sub(getattr(cfg, f'{IBOX_REFNAME}ImageSuffix'))
                ])
              LinuxParameters:
                InitProcessEnabled.IBOX_AUTO_P:
                  AllowedValues: ['', 'true', 'false']
                InitProcessEnabled: false
              LogConfiguration:
                LogDriver: awslogs
                Options:
                  awslogs-group: Ref('LogsLogGroup')
                  awslogs-region: Ref('AWS::Region')
                  awslogs-stream-prefix: Ref('AWS::StackName')
              Memory.IBOX_CODE: If(
                f"{IBOX_REFNAME}UseTaskDefinitionMemory", get_endvalue(f"{IBOX_RESNAME}Memory"), get_endvalue(IBOX_CURNAME))
              Memory: 128
              MemoryReservation.IBOX_CODE: If(
                f'{IBOX_REFNAME}MemoryReservation', get_endvalue(f'{IBOX_REFNAME}MemoryReservation'), Ref('AWS::NoValue'))
              MemoryReservation.IBOX_AUTO_PO:
                Description: 'Memory soft limit - empty for mapped value - 0 to disable'
                CONDITION: get_condition('', 'not_equals', '0', f'{IBOX_REFNAME}MemoryReservation')
                Value: IBOX_SKIP
              MemoryReservation: 0
              Name.IBOX_CODE: get_subvalue(
                '${EnvRole}%s' % ('-${1M}' if 'Name' in getattr(cfg, IBOX_REFNAME) else ''), f'{IBOX_REFNAME}Name')
              PortMappings:
                - IBOX_IF:
                  - IBOX_REFNAME.ContainerPort
                  - IBOX_IFVALUE
                  - Ref('AWS::NoValue')
                - 0:
                    ContainerPort: get_endvalue(f'{IBOX_REFNAME}ContainerPort')
                    HostPort: If(
                      'ECSTaskDefinitionBaseNetworkModeAwsVpc',
                      get_endvalue(f'{IBOX_REFNAME}ContainerPort'),
                      If(f'{IBOX_REFNAME}HostPort', get_endvalue(f'{IBOX_REFNAME}HostPort'), 0))
                    Protocol: tcp
              StopTimeout.IBOX_AUTO_PO: {}
              StopTimeout: 30
              UseTaskDefinition:
                Cpu: 'yes'
                Memory: 'yes'
        # End ContainerDefinitions
        Cpu.IBOX_CODE: If(IBOX_CURNAME, get_endvalue(IBOX_CURNAME), Ref('AWS::NoValue'))
        Cpu: none
        ExecutionRoleArn: If('ECSTasksLaunchOnFargate', get_expvalue('RoleECSTaskExecution'), Ref('AWS::NoValue'))
        Memory.IBOX_CODE: If(IBOX_CURNAME, get_endvalue(IBOX_CURNAME), Ref('AWS::NoValue'))
        Memory: none
        NetworkMode.IBOX_CODE: If("ECSTasksLaunchOnFargate", "awsvpc", get_endvalue(IBOX_CURNAME))
        NetworkMode: bridge
        RequiresCompatibilities: If('ECSTasksLaunchOnFargate', ['EC2', 'FARGATE'], ['EC2'])
        TaskRoleArn: Ref('RoleTask')

  ECSService:
    - IBOX_BASE:
        IBOX_ENABLED: False
        Cluster: get_expvalue('Cluster', 'ClusterStack')
        EnableExecuteCommand.IBOX_CODE: If(
            f'{IBOX_RESNAME}EnableExecuteCommandOverride',
            Ref(f'{IBOX_RESNAME}EnableExecuteCommand'),
            If('ECSTasksLaunchOnFargate', True, get_endvalue(f'{IBOX_RESNAME}EnableExecuteCommand', add_override=False)))
        EnableExecuteCommand.IBOX_AUTO_PO:
          Description: 'empty for mapped value - Default to "true" for FARGATE'
          AllowedValues: ['', 'true', 'false']
          Value: ${EnableExecuteCommand}
        EnableExecuteCommand: false
        HealthCheckGracePeriodSeconds: eval("0 if cfg.LoadBalancer else Ref('AWS::NoValue')")
        LaunchType.IBOX_PCO:
          IBOX_CONDITION:
            - ECSTasksLaunchOnFargate:
                get_condition('', 'equals', 'FARGATE', IBOX_CURNAME)
        NetworkConfiguration:
          IBOX_IF:
            - ECSTaskDefinitionBaseNetworkModeAwsVpc
            - IBOX_IFVALUE
            - Ref('AWS::NoValue')
          AwsvpcConfiguration:
            SecurityGroups: list([GetAtt('SecurityGroupEcsService', 'GroupId')]) + cfg.SecurityGroupsImport
            Subnets: Split(',', get_expvalue('SubnetsPrivate'))
        PlatformVersion: If('ECSTasksLaunchOnFargate', 'LATEST', Ref('AWS::NoValue'))
        TaskDefinition: Ref('TaskDefinition')
