IBoxLoader: !include
  - com/elasticloadbalancing/loadbalancer.yml

global:
  Parameter:
    - LoadBalancer:
        Description: "Comma delimited list of enabled LoadBalancer - empty for mapped value - none to disable"
        AllowedValues: ["", "none", "External", "Internal", "External,Internal"]
  Condition:
    - LoadBalancerExternal:
        Or(
          And(
            Condition("LoadBalancerOverride"),
            Or(
              Equals(Ref("LoadBalancer"), "External"),
              Equals(Ref("LoadBalancer"), "External,Internal"),
            )
          ),
          And(
            Not(Condition("LoadBalancerOverride")),
            Or(
              Equals(get_endvalue("LoadBalancer"), "External"),
              Equals(get_endvalue("LoadBalancer"), "External,Internal"),
            )
          )
        )
    - LoadBalancerInternal:
        Or(
          And(
            Condition("LoadBalancerOverride"),
            Or(
              Equals(Ref("LoadBalancer"), "Internal"),
              Equals(Ref("LoadBalancer"), "External,Internal"),
            )
          ),
          And(
            Not(Condition("LoadBalancerOverride")),
            Or(
              Equals(get_endvalue("LoadBalancer"), "Internal"),
              Equals(get_endvalue("LoadBalancer"), "External,Internal"),
            )
          )
        )
    - LoadBalancerNone:
        And(
          Not(Condition("LoadBalancerExternal")),
          Not(Condition("LoadBalancerInternal")),
        )
    - LoadBalancerExternalOrInternal:
        Or(
          Condition("LoadBalancerExternal"),
          Condition("LoadBalancerInternal"),
        )
  Output:
    - LoadBalancer:
        Value: get_endvalue('LoadBalancer')
  ElasticLoadBalancingLoadBalancer:
    - IBOX_BASE:
        IBOX_ENABLED_IF: cfg.LoadBalancerType == "Classic"
        IBOX_LINKED_OBJ:
          Alarm:
            Key: CloudWatchAlarm
            Name: IBOX_TITLE.Backend5XX
            Type: IBOX_TITLE.Backend5XX
            Conf:
              Condition: AlarmBackend5XXAnd.IBOX_TITLE
          SecurityGroupIngress:
            Key: EC2SecurityGroupIngress
            Type: EC2LoadBalancerClassicInstancesRule
            For: getattr(cfg, IBOX_RESNAME)["Listeners"]
            Conf:
              IBOX_TITLE: SecurityGroupIngressListeners.IBOX_LINKED_OBJ_FOR
              IBOX_LINKED_OBJ_NAME: IBOX_RESNAME
              IBOX_LINKED_OBJ_INDEX: IBOX_LINKED_OBJ_FOR
        IBOX_CONDITION:
          - AlarmBackend5XXAnd.IBOX_TITLE:
              And(
                Condition(f"CloudWatchAlarm{IBOX_TITLE}Backend5XX"),
                Condition(getattr(cfg, IBOX_RESNAME)["Condition"]))
    - EC2ClassicExternal:
        IBOX_TITLE: LoadBalancerClassicExternal
        Condition: LoadBalancerExternal
        Scheme: 'internet-facing'
        Subnets: Split(',', get_expvalue('SubnetsPublic'))
    - EC2ClassicInternal:
        IBOX_TITLE: LoadBalancerClassicInternal
        Condition: LoadBalancerInternal
        Scheme: 'internal'
        Subnets: Split(',', get_expvalue('SubnetsPrivate'))
  ElasticLoadBalancingV2LoadBalancer:
    - IBOX_BASE:
        IBOX_LINKED_OBJ:
          Alarm:
            Key: CloudWatchAlarm
            Name: IBOX_TITLE.Target5XX
            Type: IBOX_TITLE.Target5XX
            Conf:
              IBOX_ENABLED_IF: cfg.LoadBalancerType == "Application"
              Condition: AlarmTarget5XXAnd.IBOX_TITLE
          TargetGroup:
            Key: ElasticLoadBalancingV2TargetGroup
            Name: EC2.IBOX_TITLE
            Type: EC2.IBOX_TITLE
    - EC2ApplicationExternal:
        IBOX_TITLE: LoadBalancerApplicationExternal
        IBOX_ENABLED_IF: cfg.LoadBalancerType == "Application"
        IBOX_LINKED_OBJ:
          ListenerExternal:
            Key: ElasticLoadBalancingV2Listener
            Type: EC2.IBOX_TITLE.Https
            Name: EC2.IBOX_TITLE.Https
        IBOX_CONDITION:
          - AlarmTarget5XXAnd.IBOX_TITLE:
              And(
                Condition(f"CloudWatchAlarm{IBOX_TITLE}Target5XX"),
                Condition(getattr(cfg, IBOX_RESNAME)["Condition"]))
        Condition: LoadBalancerExternal
    - EC2ApplicationInternal:
        IBOX_TITLE: LoadBalancerApplicationInternal
        IBOX_ENABLED_IF: cfg.LoadBalancerType == "Application"
        IBOX_LINKED_OBJ:
          ListenerInternal:
            Key: ElasticLoadBalancingV2Listener
            Type: EC2.IBOX_TITLE.Http
            Name: EC2.IBOX_TITLE.Http
        IBOX_CONDITION:
          - AlarmTarget5XXAnd.IBOX_TITLE:
              And(
                Condition(f"CloudWatchAlarm{IBOX_TITLE}Target5XX"),
                Condition(getattr(cfg, IBOX_RESNAME)["Condition"]))
        Condition: LoadBalancerInternal
    - EC2NetworkExternal:
        IBOX_TITLE: LoadBalancerNetworkExternal
        IBOX_ENABLED_IF: cfg.LoadBalancerType == "Network"
        IBOX_LINKED_OBJ:
          ListenerExternal:
            Key: ElasticLoadBalancingV2Listener
            Type: EC2.IBOX_TITLE.TCP80
            Name: EC2.IBOX_TITLE.TCP80
    - EC2NetworkInternal:
        IBOX_TITLE: LoadBalancerNetworkInternal
        IBOX_ENABLED_IF: cfg.LoadBalancerType == "Network"
        IBOX_LINKED_OBJ:
          ListenerInternal:
            Key: ElasticLoadBalancingV2Listener
            Type: EC2.IBOX_TITLE.TCP80
            Name: EC2.IBOX_TITLE.TCP80
  LoadBalancer: ''
  Route53RecordSet:
    - EC2External:
        IBOX_ENABLED: True
        Condition: LoadBalancerExternalOrInternal
    - EC2Internal:
        IBOX_ENABLED: True
        Condition: LoadBalancerInternal
