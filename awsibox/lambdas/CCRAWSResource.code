# vim: ft=python
# DOWNLOAD/USE UP TO DATE BOTO3 REMOVE IF
# https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html >= 1.26.6
import sys

# from pprint import pprint
from ast import literal_eval
from functools import reduce
from pip._internal import main

SERVICES_GLOBAL = ["cloudfront"]
TAG_PREFIX = "IBoxCcrAws:"

main(
    [
        "install",
        "-I",
        "-q",
        "boto3",
        "--target",
        "/tmp/",
        "--no-cache-dir",
        "--disable-pip-version-check",
    ]
)
sys.path.insert(0, "/tmp/")
#

# warning order is important
# as crhelper import boto3 it must be imported after main
# otherway lambda will still use inline boto3 and not updated one
import boto3
import logging
from crhelper import CfnResource

logger = logging.getLogger(__name__)
logging_handler = logging.StreamHandler()
logger.addHandler(logging_handler)
logger.setLevel(logging.INFO)
logger.propagate = False


# Initialise the helper
helper = CfnResource(
    json_logging=False,
    log_level="DEBUG",
    boto_level="CRITICAL",
    polling_interval=1,
    sleep_on_delete=10,
)

try:
    # Init code goes here
    is_success = True
except Exception as e:
    helper.init_failure(e)


def do_action():
    data = {}
    client_method = getattr(client, method)
    reponse = client_method(**props)
    for n, v in atts.items():
        data[n] = reduce(dict.get, v.split("."), reponse)

    # tag resource using arn/pid as tag name
    arn = data["Arn"]
    tag = TAG_PREFIX + arn.split(":")[-1]
    tag_value = " ".join([n + "==" + data[n] for n in update_keys])
    response = tag_client.tag_resources(
        ResourceARNList=[arn],
        Tags={
            tag: tag_value,
        },
    )
    if "FailedResourcesMap" in response:
        logger.error(response)

    return data, arn


def update_props_with_ids():
    tag_key = f"{TAG_PREFIX}{res_pid}"
    response = tag_client.get_resources(TagFilters=[{"Key": tag_key}])
    if response["ResourceTagMappingList"]:
        for n in response["ResourceTagMappingList"][0]["Tags"]:
            if tag_key in n:
                tag_key_value = {
                    t.split("==")[0]: t.split("==")[1] for t in n["Value"].split()
                }
                for k in update_keys:
                    if k in tag_key_value:
                        props[k] = tag_key_value[k]


@helper.create
def create(event, context):
    data, arn = do_action()
    helper.Data.update(data)

    logger.info(f"End -- Lid: {res_lid} Pid: {arn} Method: {method}")
    return arn


@helper.update
def update(event, context):
    for n in create_keys:
        # delete keys used only for create
        props.pop(n, _)
    if props:
        update_props_with_ids()
        data, _ = do_action()
        helper.Data.update(data)

    logger.info(f"End -- Lid: {res_lid} Pid: {res_pid} Method: {method}")
    return res_pid


@helper.delete
def delete(event, context):
    props.clear()
    update_props_with_ids()
    if props:
        do_action()

    logger.info(f"End -- Lid: {res_lid} Pid: {res_pid} Method: {method}")
    return res_pid


def parse_dict_for_int(data):
    if isinstance(data, list):
        value = [parse_dict_for_int(k) for k in data]
    elif isinstance(data, dict):
        value = {i: parse_dict_for_int(k) for i, k in data.items()}
    elif isinstance(data, str) and data.isdecimal():
        value = int(data)
    elif data in ["True", "False"]:
        value = literal_eval(data)
    else:
        value = data

    return value


def lambda_handler(event, context):
    global client
    global tag_client
    global atts
    global method
    global props
    global update_keys
    global create_keys
    global res_pid
    global res_lid

    # stack_name = event["StackId"].split("/")[1]
    action = event["RequestType"]
    res_lid = event["LogicalResourceId"]
    res = event["ResourceProperties"]
    req_id = event["RequestId"]
    resp_url = event["ResponseURL"]
    res_pid = event.get("PhysicalResourceId")
    res_before = event.get("OldResourceProperties", {})

    logger.info(f"RequestId: {req_id} - ResponseURL: {resp_url}")

    service = res["Service"]
    update_keys = res["UpdateKeys"]
    create_keys = res["CreateKeys"]
    replace_keys = res["ReplaceKeys"]
    atts = res["Atts"]
    methods = res["Methods"]

    if service in SERVICES_GLOBAL:
        boto3_regional = boto3.session.Session(region_name="us-east-1")
        client = boto3_regional.client(service)
        tag_client = boto3_regional.client("resourcegroupstaggingapi")
    else:
        client = boto3.client(service)
        tag_client = boto3.client("resourcegroupstaggingapi")

    method = methods.get(action)

    if action == "Update":
        if res["Props"] == res_before["Props"]:
            res["Props"].clear()
        else:
            for n in replace_keys:
                # compare provious and current value using reduce
                if reduce(dict.get, n.split("."), res["Props"]) != reduce(
                    dict.get, n.split("."), res_before["Props"]
                ):
                    # update must become a create
                    event["RequestType"] = "Create"
                    method = methods["Create"]
                    break

    props = parse_dict_for_int(res["Props"])

    logger.info(f"Begin -- Lid: {res_lid} Service: {service} Method: {method}")
    helper(event, context)
