# vim: ft=python
import boto3
import logging
import os
import time

logger = logging.getLogger()
logger.setLevel(logging.INFO)

NAMESPACEID = os.environ["NameSpaceID"]
HOSTEDZONEID = os.environ["HostedZoneId"]
PUBLICDNSNAMESPACENAME = os.environ["PublicDnsNamespaceName"]

CLIENT_SERVICEDISCOVERY = boto3.client("servicediscovery")
CLIENT_ROUTE53 = boto3.client("route53")
RESOURCE_EC2 = boto3.resource("ec2")


def get_servicename(tags):
    if not tags:
        return

    role = None
    stackname = None
    parsedTags = None

    while not parsedTags or (stackname and not role):
        time.sleep(0.5)
        for n in tags:
            if n["Key"] == "EnvRole":
                role = n["Value"]
            if n["Key"] == "aws:cloudformation:stack-name":
                stackname = n["Value"]
            if n["Key"] == "EnvStackName":
                stackname = n["Value"]
        parsedTags = True

    if role and stackname:
        return "%s.%s" % (stackname, role)


def get_service(servicename):
    service = {}
    paginator = CLIENT_SERVICEDISCOVERY.get_paginator("list_services")
    response_iterator = paginator.paginate(
        Filters=[{"Name": "NAMESPACE_ID", "Values": [NAMESPACEID]}]
    )

    for n in response_iterator:
        for s in n["Services"]:
            if s["Name"] == servicename:
                service["Id"] = s["Id"]
                # service['InstanceCount'] = s['InstanceCount']

                return service


def create_service(servicename):
    response = CLIENT_SERVICEDISCOVERY.create_service(
        Name=servicename,
        DnsConfig={
            "NamespaceId": NAMESPACEID,
            "DnsRecords": [{"Type": "A", "TTL": 300}],
        },
    )

    return response["Service"]["Id"]


def register_instance(serviceid, instance):
    response = CLIENT_SERVICEDISCOVERY.register_instance(
        ServiceId=serviceid,
        InstanceId=instance.instance_id,
        Attributes={"AWS_INSTANCE_IPV4": instance.private_ip_address},
    )

    return response


def do_upsert_record_set(aliasname, namespace_hostedzoneid, action):
    response = CLIENT_ROUTE53.change_resource_record_sets(
        HostedZoneId=HOSTEDZONEID,
        ChangeBatch={
            "Changes": [
                {
                    "Action": action,
                    "ResourceRecordSet": {
                        "Name": aliasname,
                        "Type": "A",
                        "AliasTarget": {
                            "DNSName": aliasname,
                            "HostedZoneId": namespace_hostedzoneid,
                            "EvaluateTargetHealth": True,
                        },
                    },
                }
            ]
        },
    )


def lambda_handler(event, context):
    e_state = event["detail"]["state"]
    ec2id = event["detail"]["instance-id"]

    logger.info("%s %s" % (e_state, ec2id))
    instance = RESOURCE_EC2.Instance(ec2id)
    logger.info(instance)

    servicename = get_servicename(instance.tags)

    if not servicename:
        return

    logger.info(servicename)

    namespace_prop = CLIENT_SERVICEDISCOVERY.get_namespace(Id=NAMESPACEID)["Namespace"][
        "Properties"
    ]
    namespace_hostedzoneid = namespace_prop["DnsProperties"]["HostedZoneId"]

    aliasname = "%s.%s" % (servicename, PUBLICDNSNAMESPACENAME)

    service = get_service(servicename)

    if e_state == "running":
        if service:
            serviceid = service["Id"]
        else:
            serviceid = create_service(servicename)

        logger.info(serviceid)

        do_upsert_record_set(aliasname, namespace_hostedzoneid, "UPSERT")

        registration = register_instance(serviceid, instance)

        response = CLIENT_SERVICEDISCOVERY.get_operation(
            OperationId=registration["OperationId"]
        )
        logger.info(response)

    if service and e_state == "shutting-down":
        CLIENT_SERVICEDISCOVERY.deregister_instance(
            ServiceId=service["Id"], InstanceId=instance.instance_id
        )
        return

        # disabled until service['InstanceCount'] will be updated by AWS
        service = get_service(servicename)

        if service["InstanceCount"] == 0:
            do_upsert_record_set(aliasname, namespace_hostedzoneid, "DELETE")

            CLIENT_SERVICEDISCOVERY.delete_service(Id=service["Id"])
