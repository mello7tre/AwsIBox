# vim: ft=python
import boto3
import os
import logging
from pprint import pprint
from crhelper import CfnResource

logger = logging.getLogger(__name__)

CLIENT_CLOUDFORMATION = boto3.client("cloudformation")
CLIENT_ECS = boto3.client("ecs")

# Initialise the helper
helper = CfnResource(
    json_logging=False,
    log_level="DEBUG",
    boto_level="CRITICAL",
    polling_interval=1,
    sleep_on_delete=30,
)

try:
    # Init code goes here
    is_success = True
except Exception as e:
    helper.init_failure(e)


def parse_sg(outputs):
    sg = outputs.get("ECSRunTaskSecurityGroups", "")
    logger.info(f"SecurityGroups: {sg}")

    return sg.split(",") if sg else []


def get_outputs(name):
    outputs = {}
    resp = CLIENT_CLOUDFORMATION.describe_stacks(StackName=name)
    for o in resp["Stacks"][0].get("Outputs", []):
        name = o["OutputKey"]
        value = o["OutputValue"]
        outputs[name] = value
    return outputs


def get_resources(name):
    resources = {}
    resp = CLIENT_CLOUDFORMATION.list_stack_resources(StackName=name)
    for r in resp["StackResourceSummaries"]:
        name = r["LogicalResourceId"]
        value = r["PhysicalResourceId"]
        resources[name] = value
    return resources


def get_kwargs(name):
    stack_resources = get_resources(name)
    stack_outputs = get_outputs(name)

    try:
        task_def = stack_resources["TaskDefinitionFargate"]
    except Exception:
        task_def = stack_resources["TaskDefinition"]

    sg = parse_sg(stack_outputs)

    cluster_name = stack_outputs["ECSRunTaskClusterName"]
    subnets = stack_outputs["ECSRunTaskSubnetsPrivate"]

    kwargs = {
        "cluster": cluster_name,
        "count": 1,
        "launchType": "FARGATE",
        "networkConfiguration": {
            "awsvpcConfiguration": {
                "subnets": subnets.split(","),
                "securityGroups": sg,
                "assignPublicIp": "DISABLED",
            },
        },
        "taskDefinition": task_def.split("/")[1],
    }

    return kwargs


def do_run_task(role, appversion, reponame, stackname):
    kwargs = get_kwargs(stackname)

    kwargs["overrides"] = {
        "containerOverrides": [
            {
                "name": "lighthouse-task",
                "environment": [
                    {"name": "CFG_NAME", "value": role},
                    {"name": "APP_VERSION", "value": appversion},
                    {"name": "APP_REPO", "value": reponame},
                ],
            }
        ]
    }

    pprint(kwargs)
    response = CLIENT_ECS.run_task(**kwargs)

    if "failures" in response and len(response["failures"]) > 0:
        logger.info(response)
    else:
        return True


@helper.update
def update(event, context):
    res = event["ResourceProperties"]

    role = res["EnvRole"]
    appversion = res["EnvApp1Version"]
    reponame = res["RepoName"]
    stackname = os.environ["LightHouseTaskStackName"]

    logger.info(role)
    logger.info(appversion)
    logger.info(stackname)

    try:
        do_run_task(role, appversion, reponame, stackname)
    except Exception as e:
        logger.error(e)

    return f"{stack_name}-CustomResourceLightHouse"


@helper.create
@helper.delete
def no_op(_, __):
    return f"{stack_name}-CustomResourceLightHouse"


def lambda_handler(event, context):
    global stack_name

    stack_name = event["StackId"].split("/")[1]
    helper(event, context)
