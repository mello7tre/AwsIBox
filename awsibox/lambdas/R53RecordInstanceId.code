# vim: ft=python
import json
import logging
import os
import boto3
import time

logger = logging.getLogger()
logger.setLevel(logging.INFO)

HOSTEDZONENAME = "%s." % os.environ["HostedZoneName"]
HOSTEDZONEID = os.environ["HostedZoneId"]

CLIENT_ROUTE53 = boto3.client("route53")
RESOURCE_EC2 = boto3.resource("ec2")


def publish_to_sns(dnsname, asg_name, e_state):
    sns = boto3.client("sns")

    if e_state == "runnig":
        event_msg = "autoscaling:EC2_INSTANCE_LAUNCH"
    else:
        event_msg = "autoscaling:EC2_INSTANCE_TERMINATE"

    message = {"AutoScalingGroup": asg_name, "Event": event_msg, "DnsName": dnsname}

    sns.publish(
        TopicArn=os.environ["Topic"],
        Subject="ASGNotificationR53",
        Message=json.dumps(message),
    )


def do_upsert_record_set(instance, zonename, HOSTEDZONEID):
    r53_response = CLIENT_ROUTE53.change_resource_record_sets(
        HostedZoneId=HOSTEDZONEID,
        ChangeBatch={
            "Changes": [
                {
                    "Action": "UPSERT",
                    "ResourceRecordSet": {
                        "Name": "%s.%s" % (instance.instance_id, zonename),
                        "Type": "CNAME",
                        "TTL": 300,
                        "ResourceRecords": [{"Value": instance.private_dns_name}],
                    },
                }
            ]
        },
    )


def do_delete_record_set(HOSTEDZONEID, r53_resource_record):
    r53_response = CLIENT_ROUTE53.change_resource_record_sets(
        HostedZoneId=HOSTEDZONEID,
        ChangeBatch={
            "Changes": [{"Action": "DELETE", "ResourceRecordSet": r53_resource_record}]
        },
    )


def get_record_set(instance, zonename, HOSTEDZONEID):
    record_name = f"{instance.instance_id}.{zonename}"

    r53_resource_records = CLIENT_ROUTE53.list_resource_record_sets(
        HostedZoneId=HOSTEDZONEID,
        StartRecordName=record_name,
        StartRecordType="CNAME",
        MaxItems="1",
    )["ResourceRecordSets"]

    try:
        if r53_resource_records[0]["Name"] == record_name:
            return r53_resource_records[0]
    except Exception:
        return


def get_asg_name(tags):
    if not tags:
        return

    asgName = None
    stackName = None
    parsedTags = None

    while not parsedTags or (stackName and not asgName):
        time.sleep(0.5)
        for n in tags:
            if n["Key"] == "aws:cloudformation:stack-name":
                stackName = n["Value"]
            if n["Key"] == "EnvStackName":
                stackName = n["Value"]
            if n["Key"] == "aws:autoscaling:groupName":
                asgName = n["Value"]
            if n["Key"] == "launched-for-asg":
                asgName = n["Value"]
        parsedTags = True

    return asgName


def lambda_handler(event, context):
    e_state = event["detail"]["state"]
    ec2id = event["detail"]["instance-id"]

    logger.info("%s %s" % (e_state, ec2id))

    instance = RESOURCE_EC2.Instance(ec2id)
    logger.info(instance)

    asg_name = get_asg_name(instance.tags)

    if not asg_name:
        return

    logger.info(asg_name)

    if e_state == "running":
        logger.info("Updating/Creating Route53 Record")
        do_upsert_record_set(instance, HOSTEDZONENAME, HOSTEDZONEID)

    if e_state == "shutting-down":
        logger.info("Searching for Route53 Record info")
        r53_resource_record = get_record_set(instance, HOSTEDZONENAME, HOSTEDZONEID)

        if not r53_resource_record:
            return

        dnsname = r53_resource_record["ResourceRecords"][0]["Value"]
        publish_to_sns(dnsname, asg_name, e_state)
        logger.info("Published to SNS")

        do_delete_record_set(HOSTEDZONEID, r53_resource_record)
        logger.info("Deleted Route53 Record: %s" % r53_resource_record["Name"])
