# vim: ft=python
import boto3
import os
import logging
from pprint import pprint, pformat
from crhelper import CfnResource

logger = logging.getLogger(__name__)

# Initialise the helper
helper = CfnResource(
    json_logging=False,
    log_level="DEBUG",
    boto_level="CRITICAL",
    polling_interval=1,
    sleep_on_delete=30,
)

try:
    # Init code goes here
    is_success = True
except Exception as e:
    helper.init_failure(e)


def update_alarms(res, spot):
    alarm_prefix = "TargetTracking-service/%s-Alarm" % "/".join(
        res["ServiceArn"].split("/")[1:3]
    )
    service_base = res["ServiceBase"]
    service_spot = res["ServiceSpot"]
    cluster = res["Cluster"]

    skip_props = [
        "AlarmArn",
        "AlarmConfigurationUpdatedTimestamp",
        "StateReason",
        "StateReasonData",
        "StateUpdatedTimestamp",
        "StateValue",
        "MetricName",
        "Dimensions",
        "Period",
        "Namespace",
        "Statistic",
        "ExtendedStatistic",
        "Metrics",
        "Unit",
    ]

    def get_metrics_spot(metric, service, mid):
        m = {
            "ReturnData": False,
            "Id": mid,
            "MetricStat": {
                "Metric": {
                    "Namespace": metric["Namespace"],
                    "Dimensions": [
                        {
                            "Name": "ClusterName",
                            "Value": cluster,
                        },
                        {
                            "Name": "ServiceName",
                            "Value": service,
                        },
                    ],
                    "MetricName": metric["MetricName"],
                },
                "Period": metric["Period"],
                "Stat": metric["Statistic"],
                "Unit": metric["Unit"],
            },
        }
        return m

    def metrics_spot_to_base(metric_kwargs, m):
        mstat = m["Metrics"][1]["MetricStat"]
        metric_kwargs["MetricName"] = mstat["Metric"]["MetricName"]
        metric_kwargs["Dimensions"] = mstat["Metric"]["Dimensions"]
        metric_kwargs["Namespace"] = mstat["Metric"]["Namespace"]
        metric_kwargs["Period"] = mstat["Period"]
        metric_kwargs["Statistic"] = mstat["Stat"]
        metric_kwargs["Unit"] = mstat["Unit"]

    client = boto3.client("cloudwatch")
    response = client.describe_alarms(AlarmNamePrefix=alarm_prefix)

    for metric in response["MetricAlarms"]:
        metric_kwargs = {}

        for p, v in metric.items():
            if p not in skip_props:
                metric_kwargs[p] = v

        if spot:
            metric_kwargs["Metrics"] = []
            metric_kwargs["Metrics"].extend(
                [
                    {
                        "ReturnData": True,
                        "Expression": "cpuBase + cpuSpot",
                        "Id": "cpu",
                        "Label": "Service CpuBase + CpuSpot",
                    },
                    get_metrics_spot(metric, service_base, "cpuBase"),
                    get_metrics_spot(metric, service_spot, "cpuSpot"),
                ]
            )
        else:
            metrics_spot_to_base(metric_kwargs, metric)

        response = client.put_metric_alarm(**metric_kwargs)
        logger.info(pprint(metric_kwargs))


def do_action(event, spot):
    res = event["ResourceProperties"]

    try:
        update_alarms(res, spot=spot)
    except Exception as e:
        logger.error(e)

    return f"CustomResourceServiceSpot"


@helper.create
@helper.update
def update(event, context):
    do_action(event, True)


@helper.delete
def delete(event, context):
    do_action(event, None)


def lambda_handler(event, context):
    helper(event, context)


# event = {
#    'ServiceArn': ('arn:aws:ecs:eu-west-1:432915485918:service/'
#                  'ecs-a-d-Cluster-17LW3N3SD0XDW/'
#                  'ssg-u-d-ServiceSpot-uKYjHrQVUIAb'),
#    'AlarmPrefix': ('TargetTracking-service/ecs-a-d-Cluster-17LW3N3SD0XDW/'
#                    'rny-a-d-Service-1KKGAQXFLKLVD-Alarm'),
#    'ServiceBase': 'ssg-u-d-Service-UvIA4kqCXIAN',
#    'ServiceSpot': 'ssg-u-d-ServiceSpot-uKYjHrQVUIAb',
#    'Cluster': 'ecs-a-d-Cluster-17LW3N3SD0XDW',
# }
#
# update_alarms(event, spot=True)
